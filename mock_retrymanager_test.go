// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gocbcorex

import (
	"sync"
	"time"
)

// Ensure, that RetryManagerMock does implement RetryManager.
// If this is not the case, regenerate this file with moq.
var _ RetryManager = &RetryManagerMock{}

// RetryManagerMock is a mock implementation of RetryManager.
//
//	func TestSomethingThatUsesRetryManager(t *testing.T) {
//
//		// make and configure a mocked RetryManager
//		mockedRetryManager := &RetryManagerMock{
//			NewRetryControllerFunc: func() RetryController {
//				panic("mock out the NewRetryController method")
//			},
//		}
//
//		// use mockedRetryManager in code that requires RetryManager
//		// and then make assertions.
//
//	}
type RetryManagerMock struct {
	// NewRetryControllerFunc mocks the NewRetryController method.
	NewRetryControllerFunc func() RetryController

	// calls tracks calls to the methods.
	calls struct {
		// NewRetryController holds details about calls to the NewRetryController method.
		NewRetryController []struct {
		}
	}
	lockNewRetryController sync.RWMutex
}

// NewRetryController calls NewRetryControllerFunc.
func (mock *RetryManagerMock) NewRetryController() RetryController {
	if mock.NewRetryControllerFunc == nil {
		panic("RetryManagerMock.NewRetryControllerFunc: method is nil but RetryManager.NewRetryController was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNewRetryController.Lock()
	mock.calls.NewRetryController = append(mock.calls.NewRetryController, callInfo)
	mock.lockNewRetryController.Unlock()
	return mock.NewRetryControllerFunc()
}

// NewRetryControllerCalls gets all the calls that were made to NewRetryController.
// Check the length with:
//
//	len(mockedRetryManager.NewRetryControllerCalls())
func (mock *RetryManagerMock) NewRetryControllerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNewRetryController.RLock()
	calls = mock.calls.NewRetryController
	mock.lockNewRetryController.RUnlock()
	return calls
}

// Ensure, that RetryControllerMock does implement RetryController.
// If this is not the case, regenerate this file with moq.
var _ RetryController = &RetryControllerMock{}

// RetryControllerMock is a mock implementation of RetryController.
//
//	func TestSomethingThatUsesRetryController(t *testing.T) {
//
//		// make and configure a mocked RetryController
//		mockedRetryController := &RetryControllerMock{
//			ShouldRetryFunc: func(err error) (time.Duration, bool) {
//				panic("mock out the ShouldRetry method")
//			},
//		}
//
//		// use mockedRetryController in code that requires RetryController
//		// and then make assertions.
//
//	}
type RetryControllerMock struct {
	// ShouldRetryFunc mocks the ShouldRetry method.
	ShouldRetryFunc func(err error) (time.Duration, bool)

	// calls tracks calls to the methods.
	calls struct {
		// ShouldRetry holds details about calls to the ShouldRetry method.
		ShouldRetry []struct {
			// Err is the err argument value.
			Err error
		}
	}
	lockShouldRetry sync.RWMutex
}

// ShouldRetry calls ShouldRetryFunc.
func (mock *RetryControllerMock) ShouldRetry(err error) (time.Duration, bool) {
	if mock.ShouldRetryFunc == nil {
		panic("RetryControllerMock.ShouldRetryFunc: method is nil but RetryController.ShouldRetry was just called")
	}
	callInfo := struct {
		Err error
	}{
		Err: err,
	}
	mock.lockShouldRetry.Lock()
	mock.calls.ShouldRetry = append(mock.calls.ShouldRetry, callInfo)
	mock.lockShouldRetry.Unlock()
	return mock.ShouldRetryFunc(err)
}

// ShouldRetryCalls gets all the calls that were made to ShouldRetry.
// Check the length with:
//
//	len(mockedRetryController.ShouldRetryCalls())
func (mock *RetryControllerMock) ShouldRetryCalls() []struct {
	Err error
} {
	var calls []struct {
		Err error
	}
	mock.lockShouldRetry.RLock()
	calls = mock.calls.ShouldRetry
	mock.lockShouldRetry.RUnlock()
	return calls
}
