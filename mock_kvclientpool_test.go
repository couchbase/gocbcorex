// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gocbcorex

import (
	"context"
	"sync"
)

// Ensure, that KvClientPoolMock does implement KvClientPool.
// If this is not the case, regenerate this file with moq.
var _ KvClientPool = &KvClientPoolMock{}

// KvClientPoolMock is a mock implementation of KvClientPool.
//
//	func TestSomethingThatUsesKvClientPool(t *testing.T) {
//
//		// make and configure a mocked KvClientPool
//		mockedKvClientPool := &KvClientPoolMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetClientFunc: func(ctx context.Context) (KvClient, error) {
//				panic("mock out the GetClient method")
//			},
//			UpdateAuthFunc: func(newAuth KvClientAuth)  {
//				panic("mock out the UpdateAuth method")
//			},
//			UpdateSelectedBucketFunc: func(newBucket string)  {
//				panic("mock out the UpdateSelectedBucket method")
//			},
//			UpdateTargetFunc: func(newTarget KvTarget)  {
//				panic("mock out the UpdateTarget method")
//			},
//		}
//
//		// use mockedKvClientPool in code that requires KvClientPool
//		// and then make assertions.
//
//	}
type KvClientPoolMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(ctx context.Context) (KvClient, error)

	// UpdateAuthFunc mocks the UpdateAuth method.
	UpdateAuthFunc func(newAuth KvClientAuth)

	// UpdateSelectedBucketFunc mocks the UpdateSelectedBucket method.
	UpdateSelectedBucketFunc func(newBucket string)

	// UpdateTargetFunc mocks the UpdateTarget method.
	UpdateTargetFunc func(newTarget KvTarget)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateAuth holds details about calls to the UpdateAuth method.
		UpdateAuth []struct {
			// NewAuth is the newAuth argument value.
			NewAuth KvClientAuth
		}
		// UpdateSelectedBucket holds details about calls to the UpdateSelectedBucket method.
		UpdateSelectedBucket []struct {
			// NewBucket is the newBucket argument value.
			NewBucket string
		}
		// UpdateTarget holds details about calls to the UpdateTarget method.
		UpdateTarget []struct {
			// NewTarget is the newTarget argument value.
			NewTarget KvTarget
		}
	}
	lockClose                sync.RWMutex
	lockGetClient            sync.RWMutex
	lockUpdateAuth           sync.RWMutex
	lockUpdateSelectedBucket sync.RWMutex
	lockUpdateTarget         sync.RWMutex
}

// Close calls CloseFunc.
func (mock *KvClientPoolMock) Close() error {
	if mock.CloseFunc == nil {
		panic("KvClientPoolMock.CloseFunc: method is nil but KvClientPool.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKvClientPool.CloseCalls())
func (mock *KvClientPoolMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KvClientPoolMock) GetClient(ctx context.Context) (KvClient, error) {
	if mock.GetClientFunc == nil {
		panic("KvClientPoolMock.GetClientFunc: method is nil but KvClientPool.GetClient was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc(ctx)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//
//	len(mockedKvClientPool.GetClientCalls())
func (mock *KvClientPoolMock) GetClientCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// UpdateAuth calls UpdateAuthFunc.
func (mock *KvClientPoolMock) UpdateAuth(newAuth KvClientAuth) {
	if mock.UpdateAuthFunc == nil {
		panic("KvClientPoolMock.UpdateAuthFunc: method is nil but KvClientPool.UpdateAuth was just called")
	}
	callInfo := struct {
		NewAuth KvClientAuth
	}{
		NewAuth: newAuth,
	}
	mock.lockUpdateAuth.Lock()
	mock.calls.UpdateAuth = append(mock.calls.UpdateAuth, callInfo)
	mock.lockUpdateAuth.Unlock()
	mock.UpdateAuthFunc(newAuth)
}

// UpdateAuthCalls gets all the calls that were made to UpdateAuth.
// Check the length with:
//
//	len(mockedKvClientPool.UpdateAuthCalls())
func (mock *KvClientPoolMock) UpdateAuthCalls() []struct {
	NewAuth KvClientAuth
} {
	var calls []struct {
		NewAuth KvClientAuth
	}
	mock.lockUpdateAuth.RLock()
	calls = mock.calls.UpdateAuth
	mock.lockUpdateAuth.RUnlock()
	return calls
}

// UpdateSelectedBucket calls UpdateSelectedBucketFunc.
func (mock *KvClientPoolMock) UpdateSelectedBucket(newBucket string) {
	if mock.UpdateSelectedBucketFunc == nil {
		panic("KvClientPoolMock.UpdateSelectedBucketFunc: method is nil but KvClientPool.UpdateSelectedBucket was just called")
	}
	callInfo := struct {
		NewBucket string
	}{
		NewBucket: newBucket,
	}
	mock.lockUpdateSelectedBucket.Lock()
	mock.calls.UpdateSelectedBucket = append(mock.calls.UpdateSelectedBucket, callInfo)
	mock.lockUpdateSelectedBucket.Unlock()
	mock.UpdateSelectedBucketFunc(newBucket)
}

// UpdateSelectedBucketCalls gets all the calls that were made to UpdateSelectedBucket.
// Check the length with:
//
//	len(mockedKvClientPool.UpdateSelectedBucketCalls())
func (mock *KvClientPoolMock) UpdateSelectedBucketCalls() []struct {
	NewBucket string
} {
	var calls []struct {
		NewBucket string
	}
	mock.lockUpdateSelectedBucket.RLock()
	calls = mock.calls.UpdateSelectedBucket
	mock.lockUpdateSelectedBucket.RUnlock()
	return calls
}

// UpdateTarget calls UpdateTargetFunc.
func (mock *KvClientPoolMock) UpdateTarget(newTarget KvTarget) {
	if mock.UpdateTargetFunc == nil {
		panic("KvClientPoolMock.UpdateTargetFunc: method is nil but KvClientPool.UpdateTarget was just called")
	}
	callInfo := struct {
		NewTarget KvTarget
	}{
		NewTarget: newTarget,
	}
	mock.lockUpdateTarget.Lock()
	mock.calls.UpdateTarget = append(mock.calls.UpdateTarget, callInfo)
	mock.lockUpdateTarget.Unlock()
	mock.UpdateTargetFunc(newTarget)
}

// UpdateTargetCalls gets all the calls that were made to UpdateTarget.
// Check the length with:
//
//	len(mockedKvClientPool.UpdateTargetCalls())
func (mock *KvClientPoolMock) UpdateTargetCalls() []struct {
	NewTarget KvTarget
} {
	var calls []struct {
		NewTarget KvTarget
	}
	mock.lockUpdateTarget.RLock()
	calls = mock.calls.UpdateTarget
	mock.lockUpdateTarget.RUnlock()
	return calls
}
