// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cbauthx

import (
	"context"
	"crypto/x509"
	"sync"
)

// Ensure, that CertCheckMock does implement CertCheck.
// If this is not the case, regenerate this file with moq.
var _ CertCheck = &CertCheckMock{}

// CertCheckMock is a mock implementation of CertCheck.
//
//	func TestSomethingThatUsesCertCheck(t *testing.T) {
//
//		// make and configure a mocked CertCheck
//		mockedCertCheck := &CertCheckMock{
//			CheckCertificateFunc: func(ctx context.Context, clientCert *x509.Certificate) (UserInfo, error) {
//				panic("mock out the CheckCertificate method")
//			},
//		}
//
//		// use mockedCertCheck in code that requires CertCheck
//		// and then make assertions.
//
//	}
type CertCheckMock struct {
	// CheckCertificateFunc mocks the CheckCertificate method.
	CheckCertificateFunc func(ctx context.Context, clientCert *x509.Certificate) (UserInfo, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckCertificate holds details about calls to the CheckCertificate method.
		CheckCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientCert is the clientCert argument value.
			ClientCert *x509.Certificate
		}
	}
	lockCheckCertificate sync.RWMutex
}

// CheckCertificate calls CheckCertificateFunc.
func (mock *CertCheckMock) CheckCertificate(ctx context.Context, clientCert *x509.Certificate) (UserInfo, error) {
	if mock.CheckCertificateFunc == nil {
		panic("CertCheckMock.CheckCertificateFunc: method is nil but CertCheck.CheckCertificate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ClientCert *x509.Certificate
	}{
		Ctx:        ctx,
		ClientCert: clientCert,
	}
	mock.lockCheckCertificate.Lock()
	mock.calls.CheckCertificate = append(mock.calls.CheckCertificate, callInfo)
	mock.lockCheckCertificate.Unlock()
	return mock.CheckCertificateFunc(ctx, clientCert)
}

// CheckCertificateCalls gets all the calls that were made to CheckCertificate.
// Check the length with:
//
//	len(mockedCertCheck.CheckCertificateCalls())
func (mock *CertCheckMock) CheckCertificateCalls() []struct {
	Ctx        context.Context
	ClientCert *x509.Certificate
} {
	var calls []struct {
		Ctx        context.Context
		ClientCert *x509.Certificate
	}
	mock.lockCheckCertificate.RLock()
	calls = mock.calls.CheckCertificate
	mock.lockCheckCertificate.RUnlock()
	return calls
}
