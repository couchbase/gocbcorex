// Code generated by ogen, DO NOT EDIT.

package cbnsapi

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetBucketParams is parameters of GetBucket operation.
type GetBucketParams struct {
	// The bucket name.
	BucketName string
	// The UUID of the bucket.
	BucketUUID OptString
}

func unpackGetBucketParams(packed middleware.Parameters) (params GetBucketParams) {
	{
		key := middleware.ParameterKey{
			Name: "bucketName",
			In:   "path",
		}
		params.BucketName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "bucket_uuid",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BucketUUID = v.(OptString)
		}
	}
	return params
}

func decodeGetBucketParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBucketParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bucketName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bucketName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BucketName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucketName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: bucket_uuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "bucket_uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBucketUUIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBucketUUIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BucketUUID.SetTo(paramsDotBucketUUIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucket_uuid",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetBucketTerseParams is parameters of GetBucketTerse operation.
type GetBucketTerseParams struct {
	// The bucket name.
	BucketName string
	// The UUID of the bucket.
	BucketUUID OptString
}

func unpackGetBucketTerseParams(packed middleware.Parameters) (params GetBucketTerseParams) {
	{
		key := middleware.ParameterKey{
			Name: "bucketName",
			In:   "path",
		}
		params.BucketName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "bucket_uuid",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BucketUUID = v.(OptString)
		}
	}
	return params
}

func decodeGetBucketTerseParams(args [1]string, argsEscaped bool, r *http.Request) (params GetBucketTerseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bucketName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bucketName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BucketName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucketName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: bucket_uuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "bucket_uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBucketUUIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBucketUUIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BucketUUID.SetTo(paramsDotBucketUUIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucket_uuid",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// StreamBucketTerseParams is parameters of StreamBucketTerse operation.
type StreamBucketTerseParams struct {
	// The bucket name.
	BucketName string
	// The UUID of the bucket.
	BucketUUID OptString
}

func unpackStreamBucketTerseParams(packed middleware.Parameters) (params StreamBucketTerseParams) {
	{
		key := middleware.ParameterKey{
			Name: "bucketName",
			In:   "path",
		}
		params.BucketName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "bucket_uuid",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BucketUUID = v.(OptString)
		}
	}
	return params
}

func decodeStreamBucketTerseParams(args [1]string, argsEscaped bool, r *http.Request) (params StreamBucketTerseParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bucketName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bucketName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.BucketName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucketName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: bucket_uuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "bucket_uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBucketUUIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBucketUUIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BucketUUID.SetTo(paramsDotBucketUUIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucket_uuid",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
