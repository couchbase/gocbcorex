// Code generated by ogen, DO NOT EDIT.

package cbnsapi

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s AddressFamily) Validate() error {
	switch s {
	case "inet":
		return nil
	case "inet6":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthType) Validate() error {
	switch s {
	case "sasl":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BucketCapability) Validate() error {
	switch s {
	case "collections":
		return nil
	case "durableWrite":
		return nil
	case "tombstonedUserXAttrs":
		return nil
	case "couchapi":
		return nil
	case "subdoc.ReplaceBodyWithXattr":
		return nil
	case "subdoc.DocumentMacroSupport":
		return nil
	case "subdoc.ReviveDocument":
		return nil
	case "dcp.IgnorePurgedTombstones":
		return nil
	case "dcp":
		return nil
	case "cbhello":
		return nil
	case "touch":
		return nil
	case "cccp":
		return nil
	case "xdcrCheckpointing":
		return nil
	case "nodesExt":
		return nil
	case "xattr":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *BucketInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.NodeLocator.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeLocator",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.BucketType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bucketType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.StorageBackend.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "storageBackend",
			Error: err,
		})
	}
	if err := func() error {
		if s.BucketCapabilities == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.BucketCapabilities {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bucketCapabilities",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VBucketServerMap.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vBucketServerMap",
			Error: err,
		})
	}
	if err := func() error {
		if s.Nodes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Nodes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodes",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AuthType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "authType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.EvictionPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "evictionPolicy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DurabilityMinLevel.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "durabilityMinLevel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ConflictResolutionType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "conflictResolutionType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompressionMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "compressionMode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s BucketInfoCompressionMode) Validate() error {
	switch s {
	case "passive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BucketInfoConflictResolutionType) Validate() error {
	switch s {
	case "seqno":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BucketInfoDurabilityMinLevel) Validate() error {
	switch s {
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BucketInfoEvictionPolicy) Validate() error {
	switch s {
	case "valueOnly":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BucketType) Validate() error {
	switch s {
	case "membase":
		return nil
	case "memcached":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s BucketsInfo) Validate() error {
	alias := ([]BucketInfo)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ClusterCapabilities) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.N1ql {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "n1ql",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ClusterCapabilitiesVersion) Validate() error {
	alias := ([]int)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	if err := (validate.Array{
		MinLength:    2,
		MinLengthSet: true,
		MaxLength:    2,
		MaxLengthSet: true,
	}).ValidateLength(len(alias)); err != nil {
		return errors.Wrap(err, "array")
	}
	return nil
}

func (s N1qlClusterCapability) Validate() error {
	switch s {
	case "enhancedPreparedStatements":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *NodeInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ClusterMembership.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clusterMembership",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecoveryType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recoveryType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Services {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "services",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddressFamily.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addressFamily",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExternalListeners {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "externalListeners",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s NodeInfoClusterMembership) Validate() error {
	switch s {
	case "active":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *NodeInfoExternalListenersItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Afamily.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "afamily",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s NodeInfoRecoveryType) Validate() error {
	switch s {
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s NodeInfoStatus) Validate() error {
	switch s {
	case "healthy":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s NodeLocator) Validate() error {
	switch s {
	case "vbucket":
		return nil
	case "ketama":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *NodeServices) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.ClusterCapabilitiesVer.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clusterCapabilitiesVer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClusterCapabilities.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clusterCapabilities",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PoolInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Nodes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodes",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RebalanceStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rebalanceStatus",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AutoCompactionSettings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "autoCompactionSettings",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClusterEncryptionLevel.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clusterEncryptionLevel",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PoolInfoAutoCompactionSettings) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DatabaseFragmentationThreshold.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "databaseFragmentationThreshold",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IndexCompactionMode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "indexCompactionMode",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Size.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "size",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) Validate() error {
	switch s {
	case "undefined":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PoolInfoAutoCompactionSettingsIndexCompactionMode) Validate() error {
	switch s {
	case "circular":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PoolInfoClusterEncryptionLevel) Validate() error {
	switch s {
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PoolInfoRebalanceStatus) Validate() error {
	switch s {
	case "none":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s Service) Validate() error {
	switch s {
	case "fts":
		return nil
	case "index":
		return nil
	case "kv":
		return nil
	case "n1ql":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s StorageBackend) Validate() error {
	switch s {
	case "couchstore":
		return nil
	case "magma":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TerseBucketInfo) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.NodeLocator.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nodeLocator",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BucketType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bucketType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StorageBackend.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "storageBackend",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.BucketCapabilities {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bucketCapabilities",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VBucketServerMap.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vBucketServerMap",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ClusterCapabilitiesVer.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clusterCapabilitiesVer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClusterCapabilities.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "clusterCapabilities",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *VBucketServerMap) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.VBucketMap {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vBucketMap",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
