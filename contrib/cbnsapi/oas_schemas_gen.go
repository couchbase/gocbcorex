// Code generated by ogen, DO NOT EDIT.

package cbnsapi

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/AddressFamily
type AddressFamily string

const (
	AddressFamilyInet  AddressFamily = "inet"
	AddressFamilyInet6 AddressFamily = "inet6"
)

// AllValues returns all AddressFamily values.
func (AddressFamily) AllValues() []AddressFamily {
	return []AddressFamily{
		AddressFamilyInet,
		AddressFamilyInet6,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddressFamily) MarshalText() ([]byte, error) {
	switch s {
	case AddressFamilyInet:
		return []byte(s), nil
	case AddressFamilyInet6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddressFamily) UnmarshalText(data []byte) error {
	switch AddressFamily(data) {
	case AddressFamilyInet:
		*s = AddressFamilyInet
		return nil
	case AddressFamilyInet6:
		*s = AddressFamilyInet6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuthType
type AuthType string

const (
	AuthTypeSasl AuthType = "sasl"
)

// AllValues returns all AuthType values.
func (AuthType) AllValues() []AuthType {
	return []AuthType{
		AuthTypeSasl,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthType) MarshalText() ([]byte, error) {
	switch s {
	case AuthTypeSasl:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthType) UnmarshalText(data []byte) error {
	switch AuthType(data) {
	case AuthTypeSasl:
		*s = AuthTypeSasl
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/BucketCapability
type BucketCapability string

const (
	BucketCapabilityCollections                BucketCapability = "collections"
	BucketCapabilityDurableWrite               BucketCapability = "durableWrite"
	BucketCapabilityTombstonedUserXAttrs       BucketCapability = "tombstonedUserXAttrs"
	BucketCapabilityCouchapi                   BucketCapability = "couchapi"
	BucketCapabilitySubdocReplaceBodyWithXattr BucketCapability = "subdoc.ReplaceBodyWithXattr"
	BucketCapabilitySubdocDocumentMacroSupport BucketCapability = "subdoc.DocumentMacroSupport"
	BucketCapabilitySubdocReviveDocument       BucketCapability = "subdoc.ReviveDocument"
	BucketCapabilityDcpIgnorePurgedTombstones  BucketCapability = "dcp.IgnorePurgedTombstones"
	BucketCapabilityDcp                        BucketCapability = "dcp"
	BucketCapabilityCbhello                    BucketCapability = "cbhello"
	BucketCapabilityTouch                      BucketCapability = "touch"
	BucketCapabilityCccp                       BucketCapability = "cccp"
	BucketCapabilityXdcrCheckpointing          BucketCapability = "xdcrCheckpointing"
	BucketCapabilityNodesExt                   BucketCapability = "nodesExt"
	BucketCapabilityXattr                      BucketCapability = "xattr"
)

// AllValues returns all BucketCapability values.
func (BucketCapability) AllValues() []BucketCapability {
	return []BucketCapability{
		BucketCapabilityCollections,
		BucketCapabilityDurableWrite,
		BucketCapabilityTombstonedUserXAttrs,
		BucketCapabilityCouchapi,
		BucketCapabilitySubdocReplaceBodyWithXattr,
		BucketCapabilitySubdocDocumentMacroSupport,
		BucketCapabilitySubdocReviveDocument,
		BucketCapabilityDcpIgnorePurgedTombstones,
		BucketCapabilityDcp,
		BucketCapabilityCbhello,
		BucketCapabilityTouch,
		BucketCapabilityCccp,
		BucketCapabilityXdcrCheckpointing,
		BucketCapabilityNodesExt,
		BucketCapabilityXattr,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketCapability) MarshalText() ([]byte, error) {
	switch s {
	case BucketCapabilityCollections:
		return []byte(s), nil
	case BucketCapabilityDurableWrite:
		return []byte(s), nil
	case BucketCapabilityTombstonedUserXAttrs:
		return []byte(s), nil
	case BucketCapabilityCouchapi:
		return []byte(s), nil
	case BucketCapabilitySubdocReplaceBodyWithXattr:
		return []byte(s), nil
	case BucketCapabilitySubdocDocumentMacroSupport:
		return []byte(s), nil
	case BucketCapabilitySubdocReviveDocument:
		return []byte(s), nil
	case BucketCapabilityDcpIgnorePurgedTombstones:
		return []byte(s), nil
	case BucketCapabilityDcp:
		return []byte(s), nil
	case BucketCapabilityCbhello:
		return []byte(s), nil
	case BucketCapabilityTouch:
		return []byte(s), nil
	case BucketCapabilityCccp:
		return []byte(s), nil
	case BucketCapabilityXdcrCheckpointing:
		return []byte(s), nil
	case BucketCapabilityNodesExt:
		return []byte(s), nil
	case BucketCapabilityXattr:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketCapability) UnmarshalText(data []byte) error {
	switch BucketCapability(data) {
	case BucketCapabilityCollections:
		*s = BucketCapabilityCollections
		return nil
	case BucketCapabilityDurableWrite:
		*s = BucketCapabilityDurableWrite
		return nil
	case BucketCapabilityTombstonedUserXAttrs:
		*s = BucketCapabilityTombstonedUserXAttrs
		return nil
	case BucketCapabilityCouchapi:
		*s = BucketCapabilityCouchapi
		return nil
	case BucketCapabilitySubdocReplaceBodyWithXattr:
		*s = BucketCapabilitySubdocReplaceBodyWithXattr
		return nil
	case BucketCapabilitySubdocDocumentMacroSupport:
		*s = BucketCapabilitySubdocDocumentMacroSupport
		return nil
	case BucketCapabilitySubdocReviveDocument:
		*s = BucketCapabilitySubdocReviveDocument
		return nil
	case BucketCapabilityDcpIgnorePurgedTombstones:
		*s = BucketCapabilityDcpIgnorePurgedTombstones
		return nil
	case BucketCapabilityDcp:
		*s = BucketCapabilityDcp
		return nil
	case BucketCapabilityCbhello:
		*s = BucketCapabilityCbhello
		return nil
	case BucketCapabilityTouch:
		*s = BucketCapabilityTouch
		return nil
	case BucketCapabilityCccp:
		*s = BucketCapabilityCccp
		return nil
	case BucketCapabilityXdcrCheckpointing:
		*s = BucketCapabilityXdcrCheckpointing
		return nil
	case BucketCapabilityNodesExt:
		*s = BucketCapabilityNodesExt
		return nil
	case BucketCapabilityXattr:
		*s = BucketCapabilityXattr
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BucketInfo
type BucketInfo struct {
	Name                   string                              `json:"name"`
	NodeLocator            NodeLocator                         `json:"nodeLocator"`
	BucketType             BucketType                          `json:"bucketType"`
	StorageBackend         StorageBackend                      `json:"storageBackend"`
	UUID                   string                              `json:"uuid"`
	URI                    string                              `json:"uri"`
	StreamingUri           string                              `json:"streamingUri"`
	BucketCapabilitiesVer  string                              `json:"bucketCapabilitiesVer"`
	BucketCapabilities     []BucketCapability                  `json:"bucketCapabilities"`
	CollectionManifestUid  string                              `json:"collectionManifestUid"`
	Ddocs                  BucketInfoDdocs                     `json:"ddocs"`
	VBucketServerMap       OptVBucketServerMap                 `json:"vBucketServerMap"`
	LocalRandomKeyUri      string                              `json:"localRandomKeyUri"`
	Controllers            BucketInfoControllers               `json:"controllers"`
	Nodes                  []NodeInfo                          `json:"nodes"`
	Stats                  BucketInfoStats                     `json:"stats"`
	AuthType               AuthType                            `json:"authType"`
	AutoCompactionSettings BucketInfoAutoCompactionSettings    `json:"autoCompactionSettings"`
	ReplicaIndex           bool                                `json:"replicaIndex"`
	ReplicaNumber          int                                 `json:"replicaNumber"`
	ThreadsNumber          int                                 `json:"threadsNumber"`
	Quota                  BucketInfoQuota                     `json:"quota"`
	BasicStats             BucketInfoBasicStats                `json:"basicStats"`
	EvictionPolicy         BucketInfoEvictionPolicy            `json:"evictionPolicy"`
	DurabilityMinLevel     OptBucketInfoDurabilityMinLevel     `json:"durabilityMinLevel"`
	PitrEnabled            OptBool                             `json:"pitrEnabled"`
	PitrGranularity        OptInt                              `json:"pitrGranularity"`
	PitrMaxHistoryAge      OptInt                              `json:"pitrMaxHistoryAge"`
	ConflictResolutionType OptBucketInfoConflictResolutionType `json:"conflictResolutionType"`
	MaxTTL                 OptInt                              `json:"maxTTL"`
	CompressionMode        OptBucketInfoCompressionMode        `json:"compressionMode"`
}

// GetName returns the value of Name.
func (s *BucketInfo) GetName() string {
	return s.Name
}

// GetNodeLocator returns the value of NodeLocator.
func (s *BucketInfo) GetNodeLocator() NodeLocator {
	return s.NodeLocator
}

// GetBucketType returns the value of BucketType.
func (s *BucketInfo) GetBucketType() BucketType {
	return s.BucketType
}

// GetStorageBackend returns the value of StorageBackend.
func (s *BucketInfo) GetStorageBackend() StorageBackend {
	return s.StorageBackend
}

// GetUUID returns the value of UUID.
func (s *BucketInfo) GetUUID() string {
	return s.UUID
}

// GetURI returns the value of URI.
func (s *BucketInfo) GetURI() string {
	return s.URI
}

// GetStreamingUri returns the value of StreamingUri.
func (s *BucketInfo) GetStreamingUri() string {
	return s.StreamingUri
}

// GetBucketCapabilitiesVer returns the value of BucketCapabilitiesVer.
func (s *BucketInfo) GetBucketCapabilitiesVer() string {
	return s.BucketCapabilitiesVer
}

// GetBucketCapabilities returns the value of BucketCapabilities.
func (s *BucketInfo) GetBucketCapabilities() []BucketCapability {
	return s.BucketCapabilities
}

// GetCollectionManifestUid returns the value of CollectionManifestUid.
func (s *BucketInfo) GetCollectionManifestUid() string {
	return s.CollectionManifestUid
}

// GetDdocs returns the value of Ddocs.
func (s *BucketInfo) GetDdocs() BucketInfoDdocs {
	return s.Ddocs
}

// GetVBucketServerMap returns the value of VBucketServerMap.
func (s *BucketInfo) GetVBucketServerMap() OptVBucketServerMap {
	return s.VBucketServerMap
}

// GetLocalRandomKeyUri returns the value of LocalRandomKeyUri.
func (s *BucketInfo) GetLocalRandomKeyUri() string {
	return s.LocalRandomKeyUri
}

// GetControllers returns the value of Controllers.
func (s *BucketInfo) GetControllers() BucketInfoControllers {
	return s.Controllers
}

// GetNodes returns the value of Nodes.
func (s *BucketInfo) GetNodes() []NodeInfo {
	return s.Nodes
}

// GetStats returns the value of Stats.
func (s *BucketInfo) GetStats() BucketInfoStats {
	return s.Stats
}

// GetAuthType returns the value of AuthType.
func (s *BucketInfo) GetAuthType() AuthType {
	return s.AuthType
}

// GetAutoCompactionSettings returns the value of AutoCompactionSettings.
func (s *BucketInfo) GetAutoCompactionSettings() BucketInfoAutoCompactionSettings {
	return s.AutoCompactionSettings
}

// GetReplicaIndex returns the value of ReplicaIndex.
func (s *BucketInfo) GetReplicaIndex() bool {
	return s.ReplicaIndex
}

// GetReplicaNumber returns the value of ReplicaNumber.
func (s *BucketInfo) GetReplicaNumber() int {
	return s.ReplicaNumber
}

// GetThreadsNumber returns the value of ThreadsNumber.
func (s *BucketInfo) GetThreadsNumber() int {
	return s.ThreadsNumber
}

// GetQuota returns the value of Quota.
func (s *BucketInfo) GetQuota() BucketInfoQuota {
	return s.Quota
}

// GetBasicStats returns the value of BasicStats.
func (s *BucketInfo) GetBasicStats() BucketInfoBasicStats {
	return s.BasicStats
}

// GetEvictionPolicy returns the value of EvictionPolicy.
func (s *BucketInfo) GetEvictionPolicy() BucketInfoEvictionPolicy {
	return s.EvictionPolicy
}

// GetDurabilityMinLevel returns the value of DurabilityMinLevel.
func (s *BucketInfo) GetDurabilityMinLevel() OptBucketInfoDurabilityMinLevel {
	return s.DurabilityMinLevel
}

// GetPitrEnabled returns the value of PitrEnabled.
func (s *BucketInfo) GetPitrEnabled() OptBool {
	return s.PitrEnabled
}

// GetPitrGranularity returns the value of PitrGranularity.
func (s *BucketInfo) GetPitrGranularity() OptInt {
	return s.PitrGranularity
}

// GetPitrMaxHistoryAge returns the value of PitrMaxHistoryAge.
func (s *BucketInfo) GetPitrMaxHistoryAge() OptInt {
	return s.PitrMaxHistoryAge
}

// GetConflictResolutionType returns the value of ConflictResolutionType.
func (s *BucketInfo) GetConflictResolutionType() OptBucketInfoConflictResolutionType {
	return s.ConflictResolutionType
}

// GetMaxTTL returns the value of MaxTTL.
func (s *BucketInfo) GetMaxTTL() OptInt {
	return s.MaxTTL
}

// GetCompressionMode returns the value of CompressionMode.
func (s *BucketInfo) GetCompressionMode() OptBucketInfoCompressionMode {
	return s.CompressionMode
}

// SetName sets the value of Name.
func (s *BucketInfo) SetName(val string) {
	s.Name = val
}

// SetNodeLocator sets the value of NodeLocator.
func (s *BucketInfo) SetNodeLocator(val NodeLocator) {
	s.NodeLocator = val
}

// SetBucketType sets the value of BucketType.
func (s *BucketInfo) SetBucketType(val BucketType) {
	s.BucketType = val
}

// SetStorageBackend sets the value of StorageBackend.
func (s *BucketInfo) SetStorageBackend(val StorageBackend) {
	s.StorageBackend = val
}

// SetUUID sets the value of UUID.
func (s *BucketInfo) SetUUID(val string) {
	s.UUID = val
}

// SetURI sets the value of URI.
func (s *BucketInfo) SetURI(val string) {
	s.URI = val
}

// SetStreamingUri sets the value of StreamingUri.
func (s *BucketInfo) SetStreamingUri(val string) {
	s.StreamingUri = val
}

// SetBucketCapabilitiesVer sets the value of BucketCapabilitiesVer.
func (s *BucketInfo) SetBucketCapabilitiesVer(val string) {
	s.BucketCapabilitiesVer = val
}

// SetBucketCapabilities sets the value of BucketCapabilities.
func (s *BucketInfo) SetBucketCapabilities(val []BucketCapability) {
	s.BucketCapabilities = val
}

// SetCollectionManifestUid sets the value of CollectionManifestUid.
func (s *BucketInfo) SetCollectionManifestUid(val string) {
	s.CollectionManifestUid = val
}

// SetDdocs sets the value of Ddocs.
func (s *BucketInfo) SetDdocs(val BucketInfoDdocs) {
	s.Ddocs = val
}

// SetVBucketServerMap sets the value of VBucketServerMap.
func (s *BucketInfo) SetVBucketServerMap(val OptVBucketServerMap) {
	s.VBucketServerMap = val
}

// SetLocalRandomKeyUri sets the value of LocalRandomKeyUri.
func (s *BucketInfo) SetLocalRandomKeyUri(val string) {
	s.LocalRandomKeyUri = val
}

// SetControllers sets the value of Controllers.
func (s *BucketInfo) SetControllers(val BucketInfoControllers) {
	s.Controllers = val
}

// SetNodes sets the value of Nodes.
func (s *BucketInfo) SetNodes(val []NodeInfo) {
	s.Nodes = val
}

// SetStats sets the value of Stats.
func (s *BucketInfo) SetStats(val BucketInfoStats) {
	s.Stats = val
}

// SetAuthType sets the value of AuthType.
func (s *BucketInfo) SetAuthType(val AuthType) {
	s.AuthType = val
}

// SetAutoCompactionSettings sets the value of AutoCompactionSettings.
func (s *BucketInfo) SetAutoCompactionSettings(val BucketInfoAutoCompactionSettings) {
	s.AutoCompactionSettings = val
}

// SetReplicaIndex sets the value of ReplicaIndex.
func (s *BucketInfo) SetReplicaIndex(val bool) {
	s.ReplicaIndex = val
}

// SetReplicaNumber sets the value of ReplicaNumber.
func (s *BucketInfo) SetReplicaNumber(val int) {
	s.ReplicaNumber = val
}

// SetThreadsNumber sets the value of ThreadsNumber.
func (s *BucketInfo) SetThreadsNumber(val int) {
	s.ThreadsNumber = val
}

// SetQuota sets the value of Quota.
func (s *BucketInfo) SetQuota(val BucketInfoQuota) {
	s.Quota = val
}

// SetBasicStats sets the value of BasicStats.
func (s *BucketInfo) SetBasicStats(val BucketInfoBasicStats) {
	s.BasicStats = val
}

// SetEvictionPolicy sets the value of EvictionPolicy.
func (s *BucketInfo) SetEvictionPolicy(val BucketInfoEvictionPolicy) {
	s.EvictionPolicy = val
}

// SetDurabilityMinLevel sets the value of DurabilityMinLevel.
func (s *BucketInfo) SetDurabilityMinLevel(val OptBucketInfoDurabilityMinLevel) {
	s.DurabilityMinLevel = val
}

// SetPitrEnabled sets the value of PitrEnabled.
func (s *BucketInfo) SetPitrEnabled(val OptBool) {
	s.PitrEnabled = val
}

// SetPitrGranularity sets the value of PitrGranularity.
func (s *BucketInfo) SetPitrGranularity(val OptInt) {
	s.PitrGranularity = val
}

// SetPitrMaxHistoryAge sets the value of PitrMaxHistoryAge.
func (s *BucketInfo) SetPitrMaxHistoryAge(val OptInt) {
	s.PitrMaxHistoryAge = val
}

// SetConflictResolutionType sets the value of ConflictResolutionType.
func (s *BucketInfo) SetConflictResolutionType(val OptBucketInfoConflictResolutionType) {
	s.ConflictResolutionType = val
}

// SetMaxTTL sets the value of MaxTTL.
func (s *BucketInfo) SetMaxTTL(val OptInt) {
	s.MaxTTL = val
}

// SetCompressionMode sets the value of CompressionMode.
func (s *BucketInfo) SetCompressionMode(val OptBucketInfoCompressionMode) {
	s.CompressionMode = val
}

// BucketInfoAutoCompactionSettings represents sum type.
type BucketInfoAutoCompactionSettings struct {
	Type                              BucketInfoAutoCompactionSettingsType // switch on this field
	Bool                              bool
	BucketInfoAutoCompactionSettings1 BucketInfoAutoCompactionSettings1
}

// BucketInfoAutoCompactionSettingsType is oneOf type of BucketInfoAutoCompactionSettings.
type BucketInfoAutoCompactionSettingsType string

// Possible values for BucketInfoAutoCompactionSettingsType.
const (
	BoolBucketInfoAutoCompactionSettings                              BucketInfoAutoCompactionSettingsType = "bool"
	BucketInfoAutoCompactionSettings1BucketInfoAutoCompactionSettings BucketInfoAutoCompactionSettingsType = "BucketInfoAutoCompactionSettings1"
)

// IsBool reports whether BucketInfoAutoCompactionSettings is bool.
func (s BucketInfoAutoCompactionSettings) IsBool() bool {
	return s.Type == BoolBucketInfoAutoCompactionSettings
}

// IsBucketInfoAutoCompactionSettings1 reports whether BucketInfoAutoCompactionSettings is BucketInfoAutoCompactionSettings1.
func (s BucketInfoAutoCompactionSettings) IsBucketInfoAutoCompactionSettings1() bool {
	return s.Type == BucketInfoAutoCompactionSettings1BucketInfoAutoCompactionSettings
}

// SetBool sets BucketInfoAutoCompactionSettings to bool.
func (s *BucketInfoAutoCompactionSettings) SetBool(v bool) {
	s.Type = BoolBucketInfoAutoCompactionSettings
	s.Bool = v
}

// GetBool returns bool and true boolean if BucketInfoAutoCompactionSettings is bool.
func (s BucketInfoAutoCompactionSettings) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolBucketInfoAutoCompactionSettings returns new BucketInfoAutoCompactionSettings from bool.
func NewBoolBucketInfoAutoCompactionSettings(v bool) BucketInfoAutoCompactionSettings {
	var s BucketInfoAutoCompactionSettings
	s.SetBool(v)
	return s
}

// SetBucketInfoAutoCompactionSettings1 sets BucketInfoAutoCompactionSettings to BucketInfoAutoCompactionSettings1.
func (s *BucketInfoAutoCompactionSettings) SetBucketInfoAutoCompactionSettings1(v BucketInfoAutoCompactionSettings1) {
	s.Type = BucketInfoAutoCompactionSettings1BucketInfoAutoCompactionSettings
	s.BucketInfoAutoCompactionSettings1 = v
}

// GetBucketInfoAutoCompactionSettings1 returns BucketInfoAutoCompactionSettings1 and true boolean if BucketInfoAutoCompactionSettings is BucketInfoAutoCompactionSettings1.
func (s BucketInfoAutoCompactionSettings) GetBucketInfoAutoCompactionSettings1() (v BucketInfoAutoCompactionSettings1, ok bool) {
	if !s.IsBucketInfoAutoCompactionSettings1() {
		return v, false
	}
	return s.BucketInfoAutoCompactionSettings1, true
}

// NewBucketInfoAutoCompactionSettings1BucketInfoAutoCompactionSettings returns new BucketInfoAutoCompactionSettings from BucketInfoAutoCompactionSettings1.
func NewBucketInfoAutoCompactionSettings1BucketInfoAutoCompactionSettings(v BucketInfoAutoCompactionSettings1) BucketInfoAutoCompactionSettings {
	var s BucketInfoAutoCompactionSettings
	s.SetBucketInfoAutoCompactionSettings1(v)
	return s
}

type BucketInfoAutoCompactionSettings1 struct{}

type BucketInfoBasicStats map[string]int

func (s *BucketInfoBasicStats) init() BucketInfoBasicStats {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type BucketInfoCompressionMode string

const (
	BucketInfoCompressionModePassive BucketInfoCompressionMode = "passive"
)

// AllValues returns all BucketInfoCompressionMode values.
func (BucketInfoCompressionMode) AllValues() []BucketInfoCompressionMode {
	return []BucketInfoCompressionMode{
		BucketInfoCompressionModePassive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketInfoCompressionMode) MarshalText() ([]byte, error) {
	switch s {
	case BucketInfoCompressionModePassive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketInfoCompressionMode) UnmarshalText(data []byte) error {
	switch BucketInfoCompressionMode(data) {
	case BucketInfoCompressionModePassive:
		*s = BucketInfoCompressionModePassive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BucketInfoConflictResolutionType string

const (
	BucketInfoConflictResolutionTypeSeqno BucketInfoConflictResolutionType = "seqno"
)

// AllValues returns all BucketInfoConflictResolutionType values.
func (BucketInfoConflictResolutionType) AllValues() []BucketInfoConflictResolutionType {
	return []BucketInfoConflictResolutionType{
		BucketInfoConflictResolutionTypeSeqno,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketInfoConflictResolutionType) MarshalText() ([]byte, error) {
	switch s {
	case BucketInfoConflictResolutionTypeSeqno:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketInfoConflictResolutionType) UnmarshalText(data []byte) error {
	switch BucketInfoConflictResolutionType(data) {
	case BucketInfoConflictResolutionTypeSeqno:
		*s = BucketInfoConflictResolutionTypeSeqno
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BucketInfoControllers struct {
	CompactAll    OptString `json:"compactAll"`
	CompactDB     OptString `json:"compactDB"`
	PurgeDeletes  OptString `json:"purgeDeletes"`
	StartRecovery OptString `json:"startRecovery"`
	Flush         OptString `json:"flush"`
}

// GetCompactAll returns the value of CompactAll.
func (s *BucketInfoControllers) GetCompactAll() OptString {
	return s.CompactAll
}

// GetCompactDB returns the value of CompactDB.
func (s *BucketInfoControllers) GetCompactDB() OptString {
	return s.CompactDB
}

// GetPurgeDeletes returns the value of PurgeDeletes.
func (s *BucketInfoControllers) GetPurgeDeletes() OptString {
	return s.PurgeDeletes
}

// GetStartRecovery returns the value of StartRecovery.
func (s *BucketInfoControllers) GetStartRecovery() OptString {
	return s.StartRecovery
}

// GetFlush returns the value of Flush.
func (s *BucketInfoControllers) GetFlush() OptString {
	return s.Flush
}

// SetCompactAll sets the value of CompactAll.
func (s *BucketInfoControllers) SetCompactAll(val OptString) {
	s.CompactAll = val
}

// SetCompactDB sets the value of CompactDB.
func (s *BucketInfoControllers) SetCompactDB(val OptString) {
	s.CompactDB = val
}

// SetPurgeDeletes sets the value of PurgeDeletes.
func (s *BucketInfoControllers) SetPurgeDeletes(val OptString) {
	s.PurgeDeletes = val
}

// SetStartRecovery sets the value of StartRecovery.
func (s *BucketInfoControllers) SetStartRecovery(val OptString) {
	s.StartRecovery = val
}

// SetFlush sets the value of Flush.
func (s *BucketInfoControllers) SetFlush(val OptString) {
	s.Flush = val
}

type BucketInfoDdocs struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *BucketInfoDdocs) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *BucketInfoDdocs) SetURI(val OptString) {
	s.URI = val
}

type BucketInfoDurabilityMinLevel string

const (
	BucketInfoDurabilityMinLevelNone BucketInfoDurabilityMinLevel = "none"
)

// AllValues returns all BucketInfoDurabilityMinLevel values.
func (BucketInfoDurabilityMinLevel) AllValues() []BucketInfoDurabilityMinLevel {
	return []BucketInfoDurabilityMinLevel{
		BucketInfoDurabilityMinLevelNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketInfoDurabilityMinLevel) MarshalText() ([]byte, error) {
	switch s {
	case BucketInfoDurabilityMinLevelNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketInfoDurabilityMinLevel) UnmarshalText(data []byte) error {
	switch BucketInfoDurabilityMinLevel(data) {
	case BucketInfoDurabilityMinLevelNone:
		*s = BucketInfoDurabilityMinLevelNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BucketInfoEvictionPolicy string

const (
	BucketInfoEvictionPolicyValueOnly BucketInfoEvictionPolicy = "valueOnly"
)

// AllValues returns all BucketInfoEvictionPolicy values.
func (BucketInfoEvictionPolicy) AllValues() []BucketInfoEvictionPolicy {
	return []BucketInfoEvictionPolicy{
		BucketInfoEvictionPolicyValueOnly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketInfoEvictionPolicy) MarshalText() ([]byte, error) {
	switch s {
	case BucketInfoEvictionPolicyValueOnly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketInfoEvictionPolicy) UnmarshalText(data []byte) error {
	switch BucketInfoEvictionPolicy(data) {
	case BucketInfoEvictionPolicyValueOnly:
		*s = BucketInfoEvictionPolicyValueOnly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BucketInfoQuota struct {
	RAM    OptInt `json:"ram"`
	RawRAM OptInt `json:"rawRAM"`
}

// GetRAM returns the value of RAM.
func (s *BucketInfoQuota) GetRAM() OptInt {
	return s.RAM
}

// GetRawRAM returns the value of RawRAM.
func (s *BucketInfoQuota) GetRawRAM() OptInt {
	return s.RawRAM
}

// SetRAM sets the value of RAM.
func (s *BucketInfoQuota) SetRAM(val OptInt) {
	s.RAM = val
}

// SetRawRAM sets the value of RawRAM.
func (s *BucketInfoQuota) SetRawRAM(val OptInt) {
	s.RawRAM = val
}

type BucketInfoStats struct {
	URI              OptString `json:"uri"`
	DirectoryURI     OptString `json:"directoryURI"`
	NodeStatsListURI OptString `json:"nodeStatsListURI"`
}

// GetURI returns the value of URI.
func (s *BucketInfoStats) GetURI() OptString {
	return s.URI
}

// GetDirectoryURI returns the value of DirectoryURI.
func (s *BucketInfoStats) GetDirectoryURI() OptString {
	return s.DirectoryURI
}

// GetNodeStatsListURI returns the value of NodeStatsListURI.
func (s *BucketInfoStats) GetNodeStatsListURI() OptString {
	return s.NodeStatsListURI
}

// SetURI sets the value of URI.
func (s *BucketInfoStats) SetURI(val OptString) {
	s.URI = val
}

// SetDirectoryURI sets the value of DirectoryURI.
func (s *BucketInfoStats) SetDirectoryURI(val OptString) {
	s.DirectoryURI = val
}

// SetNodeStatsListURI sets the value of NodeStatsListURI.
func (s *BucketInfoStats) SetNodeStatsListURI(val OptString) {
	s.NodeStatsListURI = val
}

// Ref: #/components/schemas/BucketType
type BucketType string

const (
	BucketTypeMembase   BucketType = "membase"
	BucketTypeMemcached BucketType = "memcached"
)

// AllValues returns all BucketType values.
func (BucketType) AllValues() []BucketType {
	return []BucketType{
		BucketTypeMembase,
		BucketTypeMemcached,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketType) MarshalText() ([]byte, error) {
	switch s {
	case BucketTypeMembase:
		return []byte(s), nil
	case BucketTypeMemcached:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketType) UnmarshalText(data []byte) error {
	switch BucketType(data) {
	case BucketTypeMembase:
		*s = BucketTypeMembase
		return nil
	case BucketTypeMemcached:
		*s = BucketTypeMemcached
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type BucketsInfo []BucketInfo

// Ref: #/components/schemas/ClusterCapabilities
type ClusterCapabilities struct {
	N1ql []N1qlClusterCapability `json:"n1ql"`
}

// GetN1ql returns the value of N1ql.
func (s *ClusterCapabilities) GetN1ql() []N1qlClusterCapability {
	return s.N1ql
}

// SetN1ql sets the value of N1ql.
func (s *ClusterCapabilities) SetN1ql(val []N1qlClusterCapability) {
	s.N1ql = val
}

type ClusterCapabilitiesVersion []int

// Ref: #/components/schemas/N1qlClusterCapability
type N1qlClusterCapability string

const (
	N1qlClusterCapabilityEnhancedPreparedStatements N1qlClusterCapability = "enhancedPreparedStatements"
)

// AllValues returns all N1qlClusterCapability values.
func (N1qlClusterCapability) AllValues() []N1qlClusterCapability {
	return []N1qlClusterCapability{
		N1qlClusterCapabilityEnhancedPreparedStatements,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s N1qlClusterCapability) MarshalText() ([]byte, error) {
	switch s {
	case N1qlClusterCapabilityEnhancedPreparedStatements:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *N1qlClusterCapability) UnmarshalText(data []byte) error {
	switch N1qlClusterCapability(data) {
	case N1qlClusterCapabilityEnhancedPreparedStatements:
		*s = N1qlClusterCapabilityEnhancedPreparedStatements
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NodeInfo
type NodeInfo struct {
	ClusterMembership    OptNodeInfoClusterMembership    `json:"clusterMembership"`
	RecoveryType         OptNodeInfoRecoveryType         `json:"recoveryType"`
	Status               OptNodeInfoStatus               `json:"status"`
	OtpNode              OptString                       `json:"otpNode"`
	ThisNode             OptBool                         `json:"thisNode"`
	Hostname             OptString                       `json:"hostname"`
	NodeUUID             OptString                       `json:"nodeUUID"`
	ClusterCompatibility OptInt                          `json:"clusterCompatibility"`
	Version              OptString                       `json:"version"`
	Os                   OptString                       `json:"os"`
	CpuCount             OptInt                          `json:"cpuCount"`
	Ports                OptNodeInfoPorts                `json:"ports"`
	Services             []Service                       `json:"services"`
	NodeEncryption       OptBool                         `json:"nodeEncryption"`
	AddressFamilyOnly    OptBool                         `json:"addressFamilyOnly"`
	ConfiguredHostname   OptString                       `json:"configuredHostname"`
	AddressFamily        OptAddressFamily                `json:"addressFamily"`
	ExternalListeners    []NodeInfoExternalListenersItem `json:"externalListeners"`
	ServerGroup          OptString                       `json:"serverGroup"`
	CouchApiBase         OptString                       `json:"couchApiBase"`
	CouchApiBaseHTTPS    OptString                       `json:"couchApiBaseHTTPS"`
	NodeHash             OptInt                          `json:"nodeHash"`
	SystemStats          OptNodeInfoSystemStats          `json:"systemStats"`
	InterestingStats     OptNodeInfoInterestingStats     `json:"interestingStats"`
	Uptime               OptString                       `json:"uptime"`
	MemoryTotal          OptInt                          `json:"memoryTotal"`
	MemoryFree           OptInt                          `json:"memoryFree"`
	McdMemoryReserved    OptInt                          `json:"mcdMemoryReserved"`
	McdMemoryAllocated   OptInt                          `json:"mcdMemoryAllocated"`
}

// GetClusterMembership returns the value of ClusterMembership.
func (s *NodeInfo) GetClusterMembership() OptNodeInfoClusterMembership {
	return s.ClusterMembership
}

// GetRecoveryType returns the value of RecoveryType.
func (s *NodeInfo) GetRecoveryType() OptNodeInfoRecoveryType {
	return s.RecoveryType
}

// GetStatus returns the value of Status.
func (s *NodeInfo) GetStatus() OptNodeInfoStatus {
	return s.Status
}

// GetOtpNode returns the value of OtpNode.
func (s *NodeInfo) GetOtpNode() OptString {
	return s.OtpNode
}

// GetThisNode returns the value of ThisNode.
func (s *NodeInfo) GetThisNode() OptBool {
	return s.ThisNode
}

// GetHostname returns the value of Hostname.
func (s *NodeInfo) GetHostname() OptString {
	return s.Hostname
}

// GetNodeUUID returns the value of NodeUUID.
func (s *NodeInfo) GetNodeUUID() OptString {
	return s.NodeUUID
}

// GetClusterCompatibility returns the value of ClusterCompatibility.
func (s *NodeInfo) GetClusterCompatibility() OptInt {
	return s.ClusterCompatibility
}

// GetVersion returns the value of Version.
func (s *NodeInfo) GetVersion() OptString {
	return s.Version
}

// GetOs returns the value of Os.
func (s *NodeInfo) GetOs() OptString {
	return s.Os
}

// GetCpuCount returns the value of CpuCount.
func (s *NodeInfo) GetCpuCount() OptInt {
	return s.CpuCount
}

// GetPorts returns the value of Ports.
func (s *NodeInfo) GetPorts() OptNodeInfoPorts {
	return s.Ports
}

// GetServices returns the value of Services.
func (s *NodeInfo) GetServices() []Service {
	return s.Services
}

// GetNodeEncryption returns the value of NodeEncryption.
func (s *NodeInfo) GetNodeEncryption() OptBool {
	return s.NodeEncryption
}

// GetAddressFamilyOnly returns the value of AddressFamilyOnly.
func (s *NodeInfo) GetAddressFamilyOnly() OptBool {
	return s.AddressFamilyOnly
}

// GetConfiguredHostname returns the value of ConfiguredHostname.
func (s *NodeInfo) GetConfiguredHostname() OptString {
	return s.ConfiguredHostname
}

// GetAddressFamily returns the value of AddressFamily.
func (s *NodeInfo) GetAddressFamily() OptAddressFamily {
	return s.AddressFamily
}

// GetExternalListeners returns the value of ExternalListeners.
func (s *NodeInfo) GetExternalListeners() []NodeInfoExternalListenersItem {
	return s.ExternalListeners
}

// GetServerGroup returns the value of ServerGroup.
func (s *NodeInfo) GetServerGroup() OptString {
	return s.ServerGroup
}

// GetCouchApiBase returns the value of CouchApiBase.
func (s *NodeInfo) GetCouchApiBase() OptString {
	return s.CouchApiBase
}

// GetCouchApiBaseHTTPS returns the value of CouchApiBaseHTTPS.
func (s *NodeInfo) GetCouchApiBaseHTTPS() OptString {
	return s.CouchApiBaseHTTPS
}

// GetNodeHash returns the value of NodeHash.
func (s *NodeInfo) GetNodeHash() OptInt {
	return s.NodeHash
}

// GetSystemStats returns the value of SystemStats.
func (s *NodeInfo) GetSystemStats() OptNodeInfoSystemStats {
	return s.SystemStats
}

// GetInterestingStats returns the value of InterestingStats.
func (s *NodeInfo) GetInterestingStats() OptNodeInfoInterestingStats {
	return s.InterestingStats
}

// GetUptime returns the value of Uptime.
func (s *NodeInfo) GetUptime() OptString {
	return s.Uptime
}

// GetMemoryTotal returns the value of MemoryTotal.
func (s *NodeInfo) GetMemoryTotal() OptInt {
	return s.MemoryTotal
}

// GetMemoryFree returns the value of MemoryFree.
func (s *NodeInfo) GetMemoryFree() OptInt {
	return s.MemoryFree
}

// GetMcdMemoryReserved returns the value of McdMemoryReserved.
func (s *NodeInfo) GetMcdMemoryReserved() OptInt {
	return s.McdMemoryReserved
}

// GetMcdMemoryAllocated returns the value of McdMemoryAllocated.
func (s *NodeInfo) GetMcdMemoryAllocated() OptInt {
	return s.McdMemoryAllocated
}

// SetClusterMembership sets the value of ClusterMembership.
func (s *NodeInfo) SetClusterMembership(val OptNodeInfoClusterMembership) {
	s.ClusterMembership = val
}

// SetRecoveryType sets the value of RecoveryType.
func (s *NodeInfo) SetRecoveryType(val OptNodeInfoRecoveryType) {
	s.RecoveryType = val
}

// SetStatus sets the value of Status.
func (s *NodeInfo) SetStatus(val OptNodeInfoStatus) {
	s.Status = val
}

// SetOtpNode sets the value of OtpNode.
func (s *NodeInfo) SetOtpNode(val OptString) {
	s.OtpNode = val
}

// SetThisNode sets the value of ThisNode.
func (s *NodeInfo) SetThisNode(val OptBool) {
	s.ThisNode = val
}

// SetHostname sets the value of Hostname.
func (s *NodeInfo) SetHostname(val OptString) {
	s.Hostname = val
}

// SetNodeUUID sets the value of NodeUUID.
func (s *NodeInfo) SetNodeUUID(val OptString) {
	s.NodeUUID = val
}

// SetClusterCompatibility sets the value of ClusterCompatibility.
func (s *NodeInfo) SetClusterCompatibility(val OptInt) {
	s.ClusterCompatibility = val
}

// SetVersion sets the value of Version.
func (s *NodeInfo) SetVersion(val OptString) {
	s.Version = val
}

// SetOs sets the value of Os.
func (s *NodeInfo) SetOs(val OptString) {
	s.Os = val
}

// SetCpuCount sets the value of CpuCount.
func (s *NodeInfo) SetCpuCount(val OptInt) {
	s.CpuCount = val
}

// SetPorts sets the value of Ports.
func (s *NodeInfo) SetPorts(val OptNodeInfoPorts) {
	s.Ports = val
}

// SetServices sets the value of Services.
func (s *NodeInfo) SetServices(val []Service) {
	s.Services = val
}

// SetNodeEncryption sets the value of NodeEncryption.
func (s *NodeInfo) SetNodeEncryption(val OptBool) {
	s.NodeEncryption = val
}

// SetAddressFamilyOnly sets the value of AddressFamilyOnly.
func (s *NodeInfo) SetAddressFamilyOnly(val OptBool) {
	s.AddressFamilyOnly = val
}

// SetConfiguredHostname sets the value of ConfiguredHostname.
func (s *NodeInfo) SetConfiguredHostname(val OptString) {
	s.ConfiguredHostname = val
}

// SetAddressFamily sets the value of AddressFamily.
func (s *NodeInfo) SetAddressFamily(val OptAddressFamily) {
	s.AddressFamily = val
}

// SetExternalListeners sets the value of ExternalListeners.
func (s *NodeInfo) SetExternalListeners(val []NodeInfoExternalListenersItem) {
	s.ExternalListeners = val
}

// SetServerGroup sets the value of ServerGroup.
func (s *NodeInfo) SetServerGroup(val OptString) {
	s.ServerGroup = val
}

// SetCouchApiBase sets the value of CouchApiBase.
func (s *NodeInfo) SetCouchApiBase(val OptString) {
	s.CouchApiBase = val
}

// SetCouchApiBaseHTTPS sets the value of CouchApiBaseHTTPS.
func (s *NodeInfo) SetCouchApiBaseHTTPS(val OptString) {
	s.CouchApiBaseHTTPS = val
}

// SetNodeHash sets the value of NodeHash.
func (s *NodeInfo) SetNodeHash(val OptInt) {
	s.NodeHash = val
}

// SetSystemStats sets the value of SystemStats.
func (s *NodeInfo) SetSystemStats(val OptNodeInfoSystemStats) {
	s.SystemStats = val
}

// SetInterestingStats sets the value of InterestingStats.
func (s *NodeInfo) SetInterestingStats(val OptNodeInfoInterestingStats) {
	s.InterestingStats = val
}

// SetUptime sets the value of Uptime.
func (s *NodeInfo) SetUptime(val OptString) {
	s.Uptime = val
}

// SetMemoryTotal sets the value of MemoryTotal.
func (s *NodeInfo) SetMemoryTotal(val OptInt) {
	s.MemoryTotal = val
}

// SetMemoryFree sets the value of MemoryFree.
func (s *NodeInfo) SetMemoryFree(val OptInt) {
	s.MemoryFree = val
}

// SetMcdMemoryReserved sets the value of McdMemoryReserved.
func (s *NodeInfo) SetMcdMemoryReserved(val OptInt) {
	s.McdMemoryReserved = val
}

// SetMcdMemoryAllocated sets the value of McdMemoryAllocated.
func (s *NodeInfo) SetMcdMemoryAllocated(val OptInt) {
	s.McdMemoryAllocated = val
}

type NodeInfoClusterMembership string

const (
	NodeInfoClusterMembershipActive NodeInfoClusterMembership = "active"
)

// AllValues returns all NodeInfoClusterMembership values.
func (NodeInfoClusterMembership) AllValues() []NodeInfoClusterMembership {
	return []NodeInfoClusterMembership{
		NodeInfoClusterMembershipActive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeInfoClusterMembership) MarshalText() ([]byte, error) {
	switch s {
	case NodeInfoClusterMembershipActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeInfoClusterMembership) UnmarshalText(data []byte) error {
	switch NodeInfoClusterMembership(data) {
	case NodeInfoClusterMembershipActive:
		*s = NodeInfoClusterMembershipActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NodeInfoExternalListenersItem struct {
	Afamily        OptAddressFamily `json:"afamily"`
	NodeEncryption OptBool          `json:"nodeEncryption"`
}

// GetAfamily returns the value of Afamily.
func (s *NodeInfoExternalListenersItem) GetAfamily() OptAddressFamily {
	return s.Afamily
}

// GetNodeEncryption returns the value of NodeEncryption.
func (s *NodeInfoExternalListenersItem) GetNodeEncryption() OptBool {
	return s.NodeEncryption
}

// SetAfamily sets the value of Afamily.
func (s *NodeInfoExternalListenersItem) SetAfamily(val OptAddressFamily) {
	s.Afamily = val
}

// SetNodeEncryption sets the value of NodeEncryption.
func (s *NodeInfoExternalListenersItem) SetNodeEncryption(val OptBool) {
	s.NodeEncryption = val
}

type NodeInfoInterestingStats map[string]int

func (s *NodeInfoInterestingStats) init() NodeInfoInterestingStats {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type NodeInfoPorts struct {
	Direct    OptInt `json:"direct"`
	HttpsCAPI OptInt `json:"httpsCAPI"`
	HttpsMgmt OptInt `json:"httpsMgmt"`
	DistTCP   OptInt `json:"distTCP"`
	DistTLS   OptInt `json:"distTLS"`
}

// GetDirect returns the value of Direct.
func (s *NodeInfoPorts) GetDirect() OptInt {
	return s.Direct
}

// GetHttpsCAPI returns the value of HttpsCAPI.
func (s *NodeInfoPorts) GetHttpsCAPI() OptInt {
	return s.HttpsCAPI
}

// GetHttpsMgmt returns the value of HttpsMgmt.
func (s *NodeInfoPorts) GetHttpsMgmt() OptInt {
	return s.HttpsMgmt
}

// GetDistTCP returns the value of DistTCP.
func (s *NodeInfoPorts) GetDistTCP() OptInt {
	return s.DistTCP
}

// GetDistTLS returns the value of DistTLS.
func (s *NodeInfoPorts) GetDistTLS() OptInt {
	return s.DistTLS
}

// SetDirect sets the value of Direct.
func (s *NodeInfoPorts) SetDirect(val OptInt) {
	s.Direct = val
}

// SetHttpsCAPI sets the value of HttpsCAPI.
func (s *NodeInfoPorts) SetHttpsCAPI(val OptInt) {
	s.HttpsCAPI = val
}

// SetHttpsMgmt sets the value of HttpsMgmt.
func (s *NodeInfoPorts) SetHttpsMgmt(val OptInt) {
	s.HttpsMgmt = val
}

// SetDistTCP sets the value of DistTCP.
func (s *NodeInfoPorts) SetDistTCP(val OptInt) {
	s.DistTCP = val
}

// SetDistTLS sets the value of DistTLS.
func (s *NodeInfoPorts) SetDistTLS(val OptInt) {
	s.DistTLS = val
}

type NodeInfoRecoveryType string

const (
	NodeInfoRecoveryTypeNone NodeInfoRecoveryType = "none"
)

// AllValues returns all NodeInfoRecoveryType values.
func (NodeInfoRecoveryType) AllValues() []NodeInfoRecoveryType {
	return []NodeInfoRecoveryType{
		NodeInfoRecoveryTypeNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeInfoRecoveryType) MarshalText() ([]byte, error) {
	switch s {
	case NodeInfoRecoveryTypeNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeInfoRecoveryType) UnmarshalText(data []byte) error {
	switch NodeInfoRecoveryType(data) {
	case NodeInfoRecoveryTypeNone:
		*s = NodeInfoRecoveryTypeNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NodeInfoStatus string

const (
	NodeInfoStatusHealthy NodeInfoStatus = "healthy"
)

// AllValues returns all NodeInfoStatus values.
func (NodeInfoStatus) AllValues() []NodeInfoStatus {
	return []NodeInfoStatus{
		NodeInfoStatusHealthy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeInfoStatus) MarshalText() ([]byte, error) {
	switch s {
	case NodeInfoStatusHealthy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeInfoStatus) UnmarshalText(data []byte) error {
	switch NodeInfoStatus(data) {
	case NodeInfoStatusHealthy:
		*s = NodeInfoStatusHealthy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type NodeInfoSystemStats map[string]int

func (s *NodeInfoSystemStats) init() NodeInfoSystemStats {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/NodeLocator
type NodeLocator string

const (
	NodeLocatorVbucket NodeLocator = "vbucket"
	NodeLocatorKetama  NodeLocator = "ketama"
)

// AllValues returns all NodeLocator values.
func (NodeLocator) AllValues() []NodeLocator {
	return []NodeLocator{
		NodeLocatorVbucket,
		NodeLocatorKetama,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeLocator) MarshalText() ([]byte, error) {
	switch s {
	case NodeLocatorVbucket:
		return []byte(s), nil
	case NodeLocatorKetama:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeLocator) UnmarshalText(data []byte) error {
	switch NodeLocator(data) {
	case NodeLocatorVbucket:
		*s = NodeLocatorVbucket
		return nil
	case NodeLocatorKetama:
		*s = NodeLocatorKetama
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/NodeServices
type NodeServices struct {
	Rev                    OptInt                     `json:"rev"`
	NodesExt               []TerseNodeExtInfo         `json:"nodesExt"`
	ClusterCapabilitiesVer ClusterCapabilitiesVersion `json:"clusterCapabilitiesVer"`
	ClusterCapabilities    OptClusterCapabilities     `json:"clusterCapabilities"`
}

// GetRev returns the value of Rev.
func (s *NodeServices) GetRev() OptInt {
	return s.Rev
}

// GetNodesExt returns the value of NodesExt.
func (s *NodeServices) GetNodesExt() []TerseNodeExtInfo {
	return s.NodesExt
}

// GetClusterCapabilitiesVer returns the value of ClusterCapabilitiesVer.
func (s *NodeServices) GetClusterCapabilitiesVer() ClusterCapabilitiesVersion {
	return s.ClusterCapabilitiesVer
}

// GetClusterCapabilities returns the value of ClusterCapabilities.
func (s *NodeServices) GetClusterCapabilities() OptClusterCapabilities {
	return s.ClusterCapabilities
}

// SetRev sets the value of Rev.
func (s *NodeServices) SetRev(val OptInt) {
	s.Rev = val
}

// SetNodesExt sets the value of NodesExt.
func (s *NodeServices) SetNodesExt(val []TerseNodeExtInfo) {
	s.NodesExt = val
}

// SetClusterCapabilitiesVer sets the value of ClusterCapabilitiesVer.
func (s *NodeServices) SetClusterCapabilitiesVer(val ClusterCapabilitiesVersion) {
	s.ClusterCapabilitiesVer = val
}

// SetClusterCapabilities sets the value of ClusterCapabilities.
func (s *NodeServices) SetClusterCapabilities(val OptClusterCapabilities) {
	s.ClusterCapabilities = val
}

// NewOptAddressFamily returns new OptAddressFamily with value set to v.
func NewOptAddressFamily(v AddressFamily) OptAddressFamily {
	return OptAddressFamily{
		Value: v,
		Set:   true,
	}
}

// OptAddressFamily is optional AddressFamily.
type OptAddressFamily struct {
	Value AddressFamily
	Set   bool
}

// IsSet returns true if OptAddressFamily was set.
func (o OptAddressFamily) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAddressFamily) Reset() {
	var v AddressFamily
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAddressFamily) SetTo(v AddressFamily) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAddressFamily) Get() (v AddressFamily, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAddressFamily) Or(d AddressFamily) AddressFamily {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketInfoCompressionMode returns new OptBucketInfoCompressionMode with value set to v.
func NewOptBucketInfoCompressionMode(v BucketInfoCompressionMode) OptBucketInfoCompressionMode {
	return OptBucketInfoCompressionMode{
		Value: v,
		Set:   true,
	}
}

// OptBucketInfoCompressionMode is optional BucketInfoCompressionMode.
type OptBucketInfoCompressionMode struct {
	Value BucketInfoCompressionMode
	Set   bool
}

// IsSet returns true if OptBucketInfoCompressionMode was set.
func (o OptBucketInfoCompressionMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketInfoCompressionMode) Reset() {
	var v BucketInfoCompressionMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketInfoCompressionMode) SetTo(v BucketInfoCompressionMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketInfoCompressionMode) Get() (v BucketInfoCompressionMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketInfoCompressionMode) Or(d BucketInfoCompressionMode) BucketInfoCompressionMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketInfoConflictResolutionType returns new OptBucketInfoConflictResolutionType with value set to v.
func NewOptBucketInfoConflictResolutionType(v BucketInfoConflictResolutionType) OptBucketInfoConflictResolutionType {
	return OptBucketInfoConflictResolutionType{
		Value: v,
		Set:   true,
	}
}

// OptBucketInfoConflictResolutionType is optional BucketInfoConflictResolutionType.
type OptBucketInfoConflictResolutionType struct {
	Value BucketInfoConflictResolutionType
	Set   bool
}

// IsSet returns true if OptBucketInfoConflictResolutionType was set.
func (o OptBucketInfoConflictResolutionType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketInfoConflictResolutionType) Reset() {
	var v BucketInfoConflictResolutionType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketInfoConflictResolutionType) SetTo(v BucketInfoConflictResolutionType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketInfoConflictResolutionType) Get() (v BucketInfoConflictResolutionType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketInfoConflictResolutionType) Or(d BucketInfoConflictResolutionType) BucketInfoConflictResolutionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketInfoDurabilityMinLevel returns new OptBucketInfoDurabilityMinLevel with value set to v.
func NewOptBucketInfoDurabilityMinLevel(v BucketInfoDurabilityMinLevel) OptBucketInfoDurabilityMinLevel {
	return OptBucketInfoDurabilityMinLevel{
		Value: v,
		Set:   true,
	}
}

// OptBucketInfoDurabilityMinLevel is optional BucketInfoDurabilityMinLevel.
type OptBucketInfoDurabilityMinLevel struct {
	Value BucketInfoDurabilityMinLevel
	Set   bool
}

// IsSet returns true if OptBucketInfoDurabilityMinLevel was set.
func (o OptBucketInfoDurabilityMinLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketInfoDurabilityMinLevel) Reset() {
	var v BucketInfoDurabilityMinLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketInfoDurabilityMinLevel) SetTo(v BucketInfoDurabilityMinLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketInfoDurabilityMinLevel) Get() (v BucketInfoDurabilityMinLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketInfoDurabilityMinLevel) Or(d BucketInfoDurabilityMinLevel) BucketInfoDurabilityMinLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketType returns new OptBucketType with value set to v.
func NewOptBucketType(v BucketType) OptBucketType {
	return OptBucketType{
		Value: v,
		Set:   true,
	}
}

// OptBucketType is optional BucketType.
type OptBucketType struct {
	Value BucketType
	Set   bool
}

// IsSet returns true if OptBucketType was set.
func (o OptBucketType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketType) Reset() {
	var v BucketType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketType) SetTo(v BucketType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketType) Get() (v BucketType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketType) Or(d BucketType) BucketType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptClusterCapabilities returns new OptClusterCapabilities with value set to v.
func NewOptClusterCapabilities(v ClusterCapabilities) OptClusterCapabilities {
	return OptClusterCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptClusterCapabilities is optional ClusterCapabilities.
type OptClusterCapabilities struct {
	Value ClusterCapabilities
	Set   bool
}

// IsSet returns true if OptClusterCapabilities was set.
func (o OptClusterCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptClusterCapabilities) Reset() {
	var v ClusterCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptClusterCapabilities) SetTo(v ClusterCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptClusterCapabilities) Get() (v ClusterCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptClusterCapabilities) Or(d ClusterCapabilities) ClusterCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInfoClusterMembership returns new OptNodeInfoClusterMembership with value set to v.
func NewOptNodeInfoClusterMembership(v NodeInfoClusterMembership) OptNodeInfoClusterMembership {
	return OptNodeInfoClusterMembership{
		Value: v,
		Set:   true,
	}
}

// OptNodeInfoClusterMembership is optional NodeInfoClusterMembership.
type OptNodeInfoClusterMembership struct {
	Value NodeInfoClusterMembership
	Set   bool
}

// IsSet returns true if OptNodeInfoClusterMembership was set.
func (o OptNodeInfoClusterMembership) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInfoClusterMembership) Reset() {
	var v NodeInfoClusterMembership
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInfoClusterMembership) SetTo(v NodeInfoClusterMembership) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInfoClusterMembership) Get() (v NodeInfoClusterMembership, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInfoClusterMembership) Or(d NodeInfoClusterMembership) NodeInfoClusterMembership {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInfoInterestingStats returns new OptNodeInfoInterestingStats with value set to v.
func NewOptNodeInfoInterestingStats(v NodeInfoInterestingStats) OptNodeInfoInterestingStats {
	return OptNodeInfoInterestingStats{
		Value: v,
		Set:   true,
	}
}

// OptNodeInfoInterestingStats is optional NodeInfoInterestingStats.
type OptNodeInfoInterestingStats struct {
	Value NodeInfoInterestingStats
	Set   bool
}

// IsSet returns true if OptNodeInfoInterestingStats was set.
func (o OptNodeInfoInterestingStats) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInfoInterestingStats) Reset() {
	var v NodeInfoInterestingStats
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInfoInterestingStats) SetTo(v NodeInfoInterestingStats) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInfoInterestingStats) Get() (v NodeInfoInterestingStats, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInfoInterestingStats) Or(d NodeInfoInterestingStats) NodeInfoInterestingStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInfoPorts returns new OptNodeInfoPorts with value set to v.
func NewOptNodeInfoPorts(v NodeInfoPorts) OptNodeInfoPorts {
	return OptNodeInfoPorts{
		Value: v,
		Set:   true,
	}
}

// OptNodeInfoPorts is optional NodeInfoPorts.
type OptNodeInfoPorts struct {
	Value NodeInfoPorts
	Set   bool
}

// IsSet returns true if OptNodeInfoPorts was set.
func (o OptNodeInfoPorts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInfoPorts) Reset() {
	var v NodeInfoPorts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInfoPorts) SetTo(v NodeInfoPorts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInfoPorts) Get() (v NodeInfoPorts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInfoPorts) Or(d NodeInfoPorts) NodeInfoPorts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInfoRecoveryType returns new OptNodeInfoRecoveryType with value set to v.
func NewOptNodeInfoRecoveryType(v NodeInfoRecoveryType) OptNodeInfoRecoveryType {
	return OptNodeInfoRecoveryType{
		Value: v,
		Set:   true,
	}
}

// OptNodeInfoRecoveryType is optional NodeInfoRecoveryType.
type OptNodeInfoRecoveryType struct {
	Value NodeInfoRecoveryType
	Set   bool
}

// IsSet returns true if OptNodeInfoRecoveryType was set.
func (o OptNodeInfoRecoveryType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInfoRecoveryType) Reset() {
	var v NodeInfoRecoveryType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInfoRecoveryType) SetTo(v NodeInfoRecoveryType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInfoRecoveryType) Get() (v NodeInfoRecoveryType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInfoRecoveryType) Or(d NodeInfoRecoveryType) NodeInfoRecoveryType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInfoStatus returns new OptNodeInfoStatus with value set to v.
func NewOptNodeInfoStatus(v NodeInfoStatus) OptNodeInfoStatus {
	return OptNodeInfoStatus{
		Value: v,
		Set:   true,
	}
}

// OptNodeInfoStatus is optional NodeInfoStatus.
type OptNodeInfoStatus struct {
	Value NodeInfoStatus
	Set   bool
}

// IsSet returns true if OptNodeInfoStatus was set.
func (o OptNodeInfoStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInfoStatus) Reset() {
	var v NodeInfoStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInfoStatus) SetTo(v NodeInfoStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInfoStatus) Get() (v NodeInfoStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInfoStatus) Or(d NodeInfoStatus) NodeInfoStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeInfoSystemStats returns new OptNodeInfoSystemStats with value set to v.
func NewOptNodeInfoSystemStats(v NodeInfoSystemStats) OptNodeInfoSystemStats {
	return OptNodeInfoSystemStats{
		Value: v,
		Set:   true,
	}
}

// OptNodeInfoSystemStats is optional NodeInfoSystemStats.
type OptNodeInfoSystemStats struct {
	Value NodeInfoSystemStats
	Set   bool
}

// IsSet returns true if OptNodeInfoSystemStats was set.
func (o OptNodeInfoSystemStats) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeInfoSystemStats) Reset() {
	var v NodeInfoSystemStats
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeInfoSystemStats) SetTo(v NodeInfoSystemStats) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeInfoSystemStats) Get() (v NodeInfoSystemStats, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeInfoSystemStats) Or(d NodeInfoSystemStats) NodeInfoSystemStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeLocator returns new OptNodeLocator with value set to v.
func NewOptNodeLocator(v NodeLocator) OptNodeLocator {
	return OptNodeLocator{
		Value: v,
		Set:   true,
	}
}

// OptNodeLocator is optional NodeLocator.
type OptNodeLocator struct {
	Value NodeLocator
	Set   bool
}

// IsSet returns true if OptNodeLocator was set.
func (o OptNodeLocator) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeLocator) Reset() {
	var v NodeLocator
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeLocator) SetTo(v NodeLocator) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeLocator) Get() (v NodeLocator, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeLocator) Or(d NodeLocator) NodeLocator {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettings returns new OptPoolInfoAutoCompactionSettings with value set to v.
func NewOptPoolInfoAutoCompactionSettings(v PoolInfoAutoCompactionSettings) OptPoolInfoAutoCompactionSettings {
	return OptPoolInfoAutoCompactionSettings{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettings is optional PoolInfoAutoCompactionSettings.
type OptPoolInfoAutoCompactionSettings struct {
	Value PoolInfoAutoCompactionSettings
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettings was set.
func (o OptPoolInfoAutoCompactionSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettings) Reset() {
	var v PoolInfoAutoCompactionSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettings) SetTo(v PoolInfoAutoCompactionSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettings) Get() (v PoolInfoAutoCompactionSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettings) Or(d PoolInfoAutoCompactionSettings) PoolInfoAutoCompactionSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold returns new OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold with value set to v.
func NewOptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold(v PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold {
	return OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold is optional PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold.
type OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold struct {
	Value PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold was set.
func (o OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) Reset() {
	var v PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) SetTo(v PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) Get() (v PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) Or(d PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize returns new OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize with value set to v.
func NewOptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize(v PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize {
	return OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize is optional PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize.
type OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize struct {
	Value PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize was set.
func (o OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) Reset() {
	var v PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) SetTo(v PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) Get() (v PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) Or(d PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettingsIndexCircularCompaction returns new OptPoolInfoAutoCompactionSettingsIndexCircularCompaction with value set to v.
func NewOptPoolInfoAutoCompactionSettingsIndexCircularCompaction(v PoolInfoAutoCompactionSettingsIndexCircularCompaction) OptPoolInfoAutoCompactionSettingsIndexCircularCompaction {
	return OptPoolInfoAutoCompactionSettingsIndexCircularCompaction{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettingsIndexCircularCompaction is optional PoolInfoAutoCompactionSettingsIndexCircularCompaction.
type OptPoolInfoAutoCompactionSettingsIndexCircularCompaction struct {
	Value PoolInfoAutoCompactionSettingsIndexCircularCompaction
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettingsIndexCircularCompaction was set.
func (o OptPoolInfoAutoCompactionSettingsIndexCircularCompaction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettingsIndexCircularCompaction) Reset() {
	var v PoolInfoAutoCompactionSettingsIndexCircularCompaction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettingsIndexCircularCompaction) SetTo(v PoolInfoAutoCompactionSettingsIndexCircularCompaction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettingsIndexCircularCompaction) Get() (v PoolInfoAutoCompactionSettingsIndexCircularCompaction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettingsIndexCircularCompaction) Or(d PoolInfoAutoCompactionSettingsIndexCircularCompaction) PoolInfoAutoCompactionSettingsIndexCircularCompaction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval returns new OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval with value set to v.
func NewOptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval(v PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval {
	return OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval is optional PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval.
type OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval struct {
	Value PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval was set.
func (o OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) Reset() {
	var v PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) SetTo(v PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) Get() (v PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) Or(d PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettingsIndexCompactionMode returns new OptPoolInfoAutoCompactionSettingsIndexCompactionMode with value set to v.
func NewOptPoolInfoAutoCompactionSettingsIndexCompactionMode(v PoolInfoAutoCompactionSettingsIndexCompactionMode) OptPoolInfoAutoCompactionSettingsIndexCompactionMode {
	return OptPoolInfoAutoCompactionSettingsIndexCompactionMode{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettingsIndexCompactionMode is optional PoolInfoAutoCompactionSettingsIndexCompactionMode.
type OptPoolInfoAutoCompactionSettingsIndexCompactionMode struct {
	Value PoolInfoAutoCompactionSettingsIndexCompactionMode
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettingsIndexCompactionMode was set.
func (o OptPoolInfoAutoCompactionSettingsIndexCompactionMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettingsIndexCompactionMode) Reset() {
	var v PoolInfoAutoCompactionSettingsIndexCompactionMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettingsIndexCompactionMode) SetTo(v PoolInfoAutoCompactionSettingsIndexCompactionMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettingsIndexCompactionMode) Get() (v PoolInfoAutoCompactionSettingsIndexCompactionMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettingsIndexCompactionMode) Or(d PoolInfoAutoCompactionSettingsIndexCompactionMode) PoolInfoAutoCompactionSettingsIndexCompactionMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold returns new OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold with value set to v.
func NewOptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold(v PoolInfoAutoCompactionSettingsIndexFragmentationThreshold) OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold {
	return OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold is optional PoolInfoAutoCompactionSettingsIndexFragmentationThreshold.
type OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold struct {
	Value PoolInfoAutoCompactionSettingsIndexFragmentationThreshold
	Set   bool
}

// IsSet returns true if OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold was set.
func (o OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold) Reset() {
	var v PoolInfoAutoCompactionSettingsIndexFragmentationThreshold
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold) SetTo(v PoolInfoAutoCompactionSettingsIndexFragmentationThreshold) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold) Get() (v PoolInfoAutoCompactionSettingsIndexFragmentationThreshold, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold) Or(d PoolInfoAutoCompactionSettingsIndexFragmentationThreshold) PoolInfoAutoCompactionSettingsIndexFragmentationThreshold {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoBuckets returns new OptPoolInfoBuckets with value set to v.
func NewOptPoolInfoBuckets(v PoolInfoBuckets) OptPoolInfoBuckets {
	return OptPoolInfoBuckets{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoBuckets is optional PoolInfoBuckets.
type OptPoolInfoBuckets struct {
	Value PoolInfoBuckets
	Set   bool
}

// IsSet returns true if OptPoolInfoBuckets was set.
func (o OptPoolInfoBuckets) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoBuckets) Reset() {
	var v PoolInfoBuckets
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoBuckets) SetTo(v PoolInfoBuckets) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoBuckets) Get() (v PoolInfoBuckets, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoBuckets) Or(d PoolInfoBuckets) PoolInfoBuckets {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoClusterEncryptionLevel returns new OptPoolInfoClusterEncryptionLevel with value set to v.
func NewOptPoolInfoClusterEncryptionLevel(v PoolInfoClusterEncryptionLevel) OptPoolInfoClusterEncryptionLevel {
	return OptPoolInfoClusterEncryptionLevel{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoClusterEncryptionLevel is optional PoolInfoClusterEncryptionLevel.
type OptPoolInfoClusterEncryptionLevel struct {
	Value PoolInfoClusterEncryptionLevel
	Set   bool
}

// IsSet returns true if OptPoolInfoClusterEncryptionLevel was set.
func (o OptPoolInfoClusterEncryptionLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoClusterEncryptionLevel) Reset() {
	var v PoolInfoClusterEncryptionLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoClusterEncryptionLevel) SetTo(v PoolInfoClusterEncryptionLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoClusterEncryptionLevel) Get() (v PoolInfoClusterEncryptionLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoClusterEncryptionLevel) Or(d PoolInfoClusterEncryptionLevel) PoolInfoClusterEncryptionLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllers returns new OptPoolInfoControllers with value set to v.
func NewOptPoolInfoControllers(v PoolInfoControllers) OptPoolInfoControllers {
	return OptPoolInfoControllers{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllers is optional PoolInfoControllers.
type OptPoolInfoControllers struct {
	Value PoolInfoControllers
	Set   bool
}

// IsSet returns true if OptPoolInfoControllers was set.
func (o OptPoolInfoControllers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllers) Reset() {
	var v PoolInfoControllers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllers) SetTo(v PoolInfoControllers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllers) Get() (v PoolInfoControllers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllers) Or(d PoolInfoControllers) PoolInfoControllers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersAddNode returns new OptPoolInfoControllersAddNode with value set to v.
func NewOptPoolInfoControllersAddNode(v PoolInfoControllersAddNode) OptPoolInfoControllersAddNode {
	return OptPoolInfoControllersAddNode{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersAddNode is optional PoolInfoControllersAddNode.
type OptPoolInfoControllersAddNode struct {
	Value PoolInfoControllersAddNode
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersAddNode was set.
func (o OptPoolInfoControllersAddNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersAddNode) Reset() {
	var v PoolInfoControllersAddNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersAddNode) SetTo(v PoolInfoControllersAddNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersAddNode) Get() (v PoolInfoControllersAddNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersAddNode) Or(d PoolInfoControllersAddNode) PoolInfoControllersAddNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersClusterLogsCollection returns new OptPoolInfoControllersClusterLogsCollection with value set to v.
func NewOptPoolInfoControllersClusterLogsCollection(v PoolInfoControllersClusterLogsCollection) OptPoolInfoControllersClusterLogsCollection {
	return OptPoolInfoControllersClusterLogsCollection{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersClusterLogsCollection is optional PoolInfoControllersClusterLogsCollection.
type OptPoolInfoControllersClusterLogsCollection struct {
	Value PoolInfoControllersClusterLogsCollection
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersClusterLogsCollection was set.
func (o OptPoolInfoControllersClusterLogsCollection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersClusterLogsCollection) Reset() {
	var v PoolInfoControllersClusterLogsCollection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersClusterLogsCollection) SetTo(v PoolInfoControllersClusterLogsCollection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersClusterLogsCollection) Get() (v PoolInfoControllersClusterLogsCollection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersClusterLogsCollection) Or(d PoolInfoControllersClusterLogsCollection) PoolInfoControllersClusterLogsCollection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersEjectNode returns new OptPoolInfoControllersEjectNode with value set to v.
func NewOptPoolInfoControllersEjectNode(v PoolInfoControllersEjectNode) OptPoolInfoControllersEjectNode {
	return OptPoolInfoControllersEjectNode{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersEjectNode is optional PoolInfoControllersEjectNode.
type OptPoolInfoControllersEjectNode struct {
	Value PoolInfoControllersEjectNode
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersEjectNode was set.
func (o OptPoolInfoControllersEjectNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersEjectNode) Reset() {
	var v PoolInfoControllersEjectNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersEjectNode) SetTo(v PoolInfoControllersEjectNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersEjectNode) Get() (v PoolInfoControllersEjectNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersEjectNode) Or(d PoolInfoControllersEjectNode) PoolInfoControllersEjectNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersFailOver returns new OptPoolInfoControllersFailOver with value set to v.
func NewOptPoolInfoControllersFailOver(v PoolInfoControllersFailOver) OptPoolInfoControllersFailOver {
	return OptPoolInfoControllersFailOver{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersFailOver is optional PoolInfoControllersFailOver.
type OptPoolInfoControllersFailOver struct {
	Value PoolInfoControllersFailOver
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersFailOver was set.
func (o OptPoolInfoControllersFailOver) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersFailOver) Reset() {
	var v PoolInfoControllersFailOver
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersFailOver) SetTo(v PoolInfoControllersFailOver) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersFailOver) Get() (v PoolInfoControllersFailOver, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersFailOver) Or(d PoolInfoControllersFailOver) PoolInfoControllersFailOver {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersReAddNode returns new OptPoolInfoControllersReAddNode with value set to v.
func NewOptPoolInfoControllersReAddNode(v PoolInfoControllersReAddNode) OptPoolInfoControllersReAddNode {
	return OptPoolInfoControllersReAddNode{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersReAddNode is optional PoolInfoControllersReAddNode.
type OptPoolInfoControllersReAddNode struct {
	Value PoolInfoControllersReAddNode
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersReAddNode was set.
func (o OptPoolInfoControllersReAddNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersReAddNode) Reset() {
	var v PoolInfoControllersReAddNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersReAddNode) SetTo(v PoolInfoControllersReAddNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersReAddNode) Get() (v PoolInfoControllersReAddNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersReAddNode) Or(d PoolInfoControllersReAddNode) PoolInfoControllersReAddNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersReFailOver returns new OptPoolInfoControllersReFailOver with value set to v.
func NewOptPoolInfoControllersReFailOver(v PoolInfoControllersReFailOver) OptPoolInfoControllersReFailOver {
	return OptPoolInfoControllersReFailOver{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersReFailOver is optional PoolInfoControllersReFailOver.
type OptPoolInfoControllersReFailOver struct {
	Value PoolInfoControllersReFailOver
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersReFailOver was set.
func (o OptPoolInfoControllersReFailOver) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersReFailOver) Reset() {
	var v PoolInfoControllersReFailOver
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersReFailOver) SetTo(v PoolInfoControllersReFailOver) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersReFailOver) Get() (v PoolInfoControllersReFailOver, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersReFailOver) Or(d PoolInfoControllersReFailOver) PoolInfoControllersReFailOver {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersRebalance returns new OptPoolInfoControllersRebalance with value set to v.
func NewOptPoolInfoControllersRebalance(v PoolInfoControllersRebalance) OptPoolInfoControllersRebalance {
	return OptPoolInfoControllersRebalance{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersRebalance is optional PoolInfoControllersRebalance.
type OptPoolInfoControllersRebalance struct {
	Value PoolInfoControllersRebalance
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersRebalance was set.
func (o OptPoolInfoControllersRebalance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersRebalance) Reset() {
	var v PoolInfoControllersRebalance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersRebalance) SetTo(v PoolInfoControllersRebalance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersRebalance) Get() (v PoolInfoControllersRebalance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersRebalance) Or(d PoolInfoControllersRebalance) PoolInfoControllersRebalance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersReplication returns new OptPoolInfoControllersReplication with value set to v.
func NewOptPoolInfoControllersReplication(v PoolInfoControllersReplication) OptPoolInfoControllersReplication {
	return OptPoolInfoControllersReplication{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersReplication is optional PoolInfoControllersReplication.
type OptPoolInfoControllersReplication struct {
	Value PoolInfoControllersReplication
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersReplication was set.
func (o OptPoolInfoControllersReplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersReplication) Reset() {
	var v PoolInfoControllersReplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersReplication) SetTo(v PoolInfoControllersReplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersReplication) Get() (v PoolInfoControllersReplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersReplication) Or(d PoolInfoControllersReplication) PoolInfoControllersReplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersSetAutoCompaction returns new OptPoolInfoControllersSetAutoCompaction with value set to v.
func NewOptPoolInfoControllersSetAutoCompaction(v PoolInfoControllersSetAutoCompaction) OptPoolInfoControllersSetAutoCompaction {
	return OptPoolInfoControllersSetAutoCompaction{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersSetAutoCompaction is optional PoolInfoControllersSetAutoCompaction.
type OptPoolInfoControllersSetAutoCompaction struct {
	Value PoolInfoControllersSetAutoCompaction
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersSetAutoCompaction was set.
func (o OptPoolInfoControllersSetAutoCompaction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersSetAutoCompaction) Reset() {
	var v PoolInfoControllersSetAutoCompaction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersSetAutoCompaction) SetTo(v PoolInfoControllersSetAutoCompaction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersSetAutoCompaction) Get() (v PoolInfoControllersSetAutoCompaction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersSetAutoCompaction) Or(d PoolInfoControllersSetAutoCompaction) PoolInfoControllersSetAutoCompaction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersSetRecoveryType returns new OptPoolInfoControllersSetRecoveryType with value set to v.
func NewOptPoolInfoControllersSetRecoveryType(v PoolInfoControllersSetRecoveryType) OptPoolInfoControllersSetRecoveryType {
	return OptPoolInfoControllersSetRecoveryType{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersSetRecoveryType is optional PoolInfoControllersSetRecoveryType.
type OptPoolInfoControllersSetRecoveryType struct {
	Value PoolInfoControllersSetRecoveryType
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersSetRecoveryType was set.
func (o OptPoolInfoControllersSetRecoveryType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersSetRecoveryType) Reset() {
	var v PoolInfoControllersSetRecoveryType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersSetRecoveryType) SetTo(v PoolInfoControllersSetRecoveryType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersSetRecoveryType) Get() (v PoolInfoControllersSetRecoveryType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersSetRecoveryType) Or(d PoolInfoControllersSetRecoveryType) PoolInfoControllersSetRecoveryType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoControllersStartGracefulFailover returns new OptPoolInfoControllersStartGracefulFailover with value set to v.
func NewOptPoolInfoControllersStartGracefulFailover(v PoolInfoControllersStartGracefulFailover) OptPoolInfoControllersStartGracefulFailover {
	return OptPoolInfoControllersStartGracefulFailover{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoControllersStartGracefulFailover is optional PoolInfoControllersStartGracefulFailover.
type OptPoolInfoControllersStartGracefulFailover struct {
	Value PoolInfoControllersStartGracefulFailover
	Set   bool
}

// IsSet returns true if OptPoolInfoControllersStartGracefulFailover was set.
func (o OptPoolInfoControllersStartGracefulFailover) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoControllersStartGracefulFailover) Reset() {
	var v PoolInfoControllersStartGracefulFailover
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoControllersStartGracefulFailover) SetTo(v PoolInfoControllersStartGracefulFailover) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoControllersStartGracefulFailover) Get() (v PoolInfoControllersStartGracefulFailover, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoControllersStartGracefulFailover) Or(d PoolInfoControllersStartGracefulFailover) PoolInfoControllersStartGracefulFailover {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoCounters returns new OptPoolInfoCounters with value set to v.
func NewOptPoolInfoCounters(v PoolInfoCounters) OptPoolInfoCounters {
	return OptPoolInfoCounters{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoCounters is optional PoolInfoCounters.
type OptPoolInfoCounters struct {
	Value PoolInfoCounters
	Set   bool
}

// IsSet returns true if OptPoolInfoCounters was set.
func (o OptPoolInfoCounters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoCounters) Reset() {
	var v PoolInfoCounters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoCounters) SetTo(v PoolInfoCounters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoCounters) Get() (v PoolInfoCounters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoCounters) Or(d PoolInfoCounters) PoolInfoCounters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoRebalanceStatus returns new OptPoolInfoRebalanceStatus with value set to v.
func NewOptPoolInfoRebalanceStatus(v PoolInfoRebalanceStatus) OptPoolInfoRebalanceStatus {
	return OptPoolInfoRebalanceStatus{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoRebalanceStatus is optional PoolInfoRebalanceStatus.
type OptPoolInfoRebalanceStatus struct {
	Value PoolInfoRebalanceStatus
	Set   bool
}

// IsSet returns true if OptPoolInfoRebalanceStatus was set.
func (o OptPoolInfoRebalanceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoRebalanceStatus) Reset() {
	var v PoolInfoRebalanceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoRebalanceStatus) SetTo(v PoolInfoRebalanceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoRebalanceStatus) Get() (v PoolInfoRebalanceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoRebalanceStatus) Or(d PoolInfoRebalanceStatus) PoolInfoRebalanceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoRemoteClusters returns new OptPoolInfoRemoteClusters with value set to v.
func NewOptPoolInfoRemoteClusters(v PoolInfoRemoteClusters) OptPoolInfoRemoteClusters {
	return OptPoolInfoRemoteClusters{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoRemoteClusters is optional PoolInfoRemoteClusters.
type OptPoolInfoRemoteClusters struct {
	Value PoolInfoRemoteClusters
	Set   bool
}

// IsSet returns true if OptPoolInfoRemoteClusters was set.
func (o OptPoolInfoRemoteClusters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoRemoteClusters) Reset() {
	var v PoolInfoRemoteClusters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoRemoteClusters) SetTo(v PoolInfoRemoteClusters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoRemoteClusters) Get() (v PoolInfoRemoteClusters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoRemoteClusters) Or(d PoolInfoRemoteClusters) PoolInfoRemoteClusters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoStorageTotals returns new OptPoolInfoStorageTotals with value set to v.
func NewOptPoolInfoStorageTotals(v PoolInfoStorageTotals) OptPoolInfoStorageTotals {
	return OptPoolInfoStorageTotals{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoStorageTotals is optional PoolInfoStorageTotals.
type OptPoolInfoStorageTotals struct {
	Value PoolInfoStorageTotals
	Set   bool
}

// IsSet returns true if OptPoolInfoStorageTotals was set.
func (o OptPoolInfoStorageTotals) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoStorageTotals) Reset() {
	var v PoolInfoStorageTotals
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoStorageTotals) SetTo(v PoolInfoStorageTotals) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoStorageTotals) Get() (v PoolInfoStorageTotals, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoStorageTotals) Or(d PoolInfoStorageTotals) PoolInfoStorageTotals {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoStorageTotalsHdd returns new OptPoolInfoStorageTotalsHdd with value set to v.
func NewOptPoolInfoStorageTotalsHdd(v PoolInfoStorageTotalsHdd) OptPoolInfoStorageTotalsHdd {
	return OptPoolInfoStorageTotalsHdd{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoStorageTotalsHdd is optional PoolInfoStorageTotalsHdd.
type OptPoolInfoStorageTotalsHdd struct {
	Value PoolInfoStorageTotalsHdd
	Set   bool
}

// IsSet returns true if OptPoolInfoStorageTotalsHdd was set.
func (o OptPoolInfoStorageTotalsHdd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoStorageTotalsHdd) Reset() {
	var v PoolInfoStorageTotalsHdd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoStorageTotalsHdd) SetTo(v PoolInfoStorageTotalsHdd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoStorageTotalsHdd) Get() (v PoolInfoStorageTotalsHdd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoStorageTotalsHdd) Or(d PoolInfoStorageTotalsHdd) PoolInfoStorageTotalsHdd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoStorageTotalsRAM returns new OptPoolInfoStorageTotalsRAM with value set to v.
func NewOptPoolInfoStorageTotalsRAM(v PoolInfoStorageTotalsRAM) OptPoolInfoStorageTotalsRAM {
	return OptPoolInfoStorageTotalsRAM{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoStorageTotalsRAM is optional PoolInfoStorageTotalsRAM.
type OptPoolInfoStorageTotalsRAM struct {
	Value PoolInfoStorageTotalsRAM
	Set   bool
}

// IsSet returns true if OptPoolInfoStorageTotalsRAM was set.
func (o OptPoolInfoStorageTotalsRAM) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoStorageTotalsRAM) Reset() {
	var v PoolInfoStorageTotalsRAM
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoStorageTotalsRAM) SetTo(v PoolInfoStorageTotalsRAM) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoStorageTotalsRAM) Get() (v PoolInfoStorageTotalsRAM, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoStorageTotalsRAM) Or(d PoolInfoStorageTotalsRAM) PoolInfoStorageTotalsRAM {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolInfoTasks returns new OptPoolInfoTasks with value set to v.
func NewOptPoolInfoTasks(v PoolInfoTasks) OptPoolInfoTasks {
	return OptPoolInfoTasks{
		Value: v,
		Set:   true,
	}
}

// OptPoolInfoTasks is optional PoolInfoTasks.
type OptPoolInfoTasks struct {
	Value PoolInfoTasks
	Set   bool
}

// IsSet returns true if OptPoolInfoTasks was set.
func (o OptPoolInfoTasks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolInfoTasks) Reset() {
	var v PoolInfoTasks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolInfoTasks) SetTo(v PoolInfoTasks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolInfoTasks) Get() (v PoolInfoTasks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolInfoTasks) Or(d PoolInfoTasks) PoolInfoTasks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolsInfoComponentsVersion returns new OptPoolsInfoComponentsVersion with value set to v.
func NewOptPoolsInfoComponentsVersion(v PoolsInfoComponentsVersion) OptPoolsInfoComponentsVersion {
	return OptPoolsInfoComponentsVersion{
		Value: v,
		Set:   true,
	}
}

// OptPoolsInfoComponentsVersion is optional PoolsInfoComponentsVersion.
type OptPoolsInfoComponentsVersion struct {
	Value PoolsInfoComponentsVersion
	Set   bool
}

// IsSet returns true if OptPoolsInfoComponentsVersion was set.
func (o OptPoolsInfoComponentsVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolsInfoComponentsVersion) Reset() {
	var v PoolsInfoComponentsVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolsInfoComponentsVersion) SetTo(v PoolsInfoComponentsVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolsInfoComponentsVersion) Get() (v PoolsInfoComponentsVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolsInfoComponentsVersion) Or(d PoolsInfoComponentsVersion) PoolsInfoComponentsVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolsInfoSettings returns new OptPoolsInfoSettings with value set to v.
func NewOptPoolsInfoSettings(v PoolsInfoSettings) OptPoolsInfoSettings {
	return OptPoolsInfoSettings{
		Value: v,
		Set:   true,
	}
}

// OptPoolsInfoSettings is optional PoolsInfoSettings.
type OptPoolsInfoSettings struct {
	Value PoolsInfoSettings
	Set   bool
}

// IsSet returns true if OptPoolsInfoSettings was set.
func (o OptPoolsInfoSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolsInfoSettings) Reset() {
	var v PoolsInfoSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolsInfoSettings) SetTo(v PoolsInfoSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolsInfoSettings) Get() (v PoolsInfoSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolsInfoSettings) Or(d PoolsInfoSettings) PoolsInfoSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageBackend returns new OptStorageBackend with value set to v.
func NewOptStorageBackend(v StorageBackend) OptStorageBackend {
	return OptStorageBackend{
		Value: v,
		Set:   true,
	}
}

// OptStorageBackend is optional StorageBackend.
type OptStorageBackend struct {
	Value StorageBackend
	Set   bool
}

// IsSet returns true if OptStorageBackend was set.
func (o OptStorageBackend) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageBackend) Reset() {
	var v StorageBackend
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageBackend) SetTo(v StorageBackend) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageBackend) Get() (v StorageBackend, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageBackend) Or(d StorageBackend) StorageBackend {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTerseBucketInfoDdocs returns new OptTerseBucketInfoDdocs with value set to v.
func NewOptTerseBucketInfoDdocs(v TerseBucketInfoDdocs) OptTerseBucketInfoDdocs {
	return OptTerseBucketInfoDdocs{
		Value: v,
		Set:   true,
	}
}

// OptTerseBucketInfoDdocs is optional TerseBucketInfoDdocs.
type OptTerseBucketInfoDdocs struct {
	Value TerseBucketInfoDdocs
	Set   bool
}

// IsSet returns true if OptTerseBucketInfoDdocs was set.
func (o OptTerseBucketInfoDdocs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTerseBucketInfoDdocs) Reset() {
	var v TerseBucketInfoDdocs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTerseBucketInfoDdocs) SetTo(v TerseBucketInfoDdocs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTerseBucketInfoDdocs) Get() (v TerseBucketInfoDdocs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTerseBucketInfoDdocs) Or(d TerseBucketInfoDdocs) TerseBucketInfoDdocs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTerseNodeExtInfoServices returns new OptTerseNodeExtInfoServices with value set to v.
func NewOptTerseNodeExtInfoServices(v TerseNodeExtInfoServices) OptTerseNodeExtInfoServices {
	return OptTerseNodeExtInfoServices{
		Value: v,
		Set:   true,
	}
}

// OptTerseNodeExtInfoServices is optional TerseNodeExtInfoServices.
type OptTerseNodeExtInfoServices struct {
	Value TerseNodeExtInfoServices
	Set   bool
}

// IsSet returns true if OptTerseNodeExtInfoServices was set.
func (o OptTerseNodeExtInfoServices) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTerseNodeExtInfoServices) Reset() {
	var v TerseNodeExtInfoServices
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTerseNodeExtInfoServices) SetTo(v TerseNodeExtInfoServices) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTerseNodeExtInfoServices) Get() (v TerseNodeExtInfoServices, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTerseNodeExtInfoServices) Or(d TerseNodeExtInfoServices) TerseNodeExtInfoServices {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTerseNodeInfoPorts returns new OptTerseNodeInfoPorts with value set to v.
func NewOptTerseNodeInfoPorts(v TerseNodeInfoPorts) OptTerseNodeInfoPorts {
	return OptTerseNodeInfoPorts{
		Value: v,
		Set:   true,
	}
}

// OptTerseNodeInfoPorts is optional TerseNodeInfoPorts.
type OptTerseNodeInfoPorts struct {
	Value TerseNodeInfoPorts
	Set   bool
}

// IsSet returns true if OptTerseNodeInfoPorts was set.
func (o OptTerseNodeInfoPorts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTerseNodeInfoPorts) Reset() {
	var v TerseNodeInfoPorts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTerseNodeInfoPorts) SetTo(v TerseNodeInfoPorts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTerseNodeInfoPorts) Get() (v TerseNodeInfoPorts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTerseNodeInfoPorts) Or(d TerseNodeInfoPorts) TerseNodeInfoPorts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVBucketServerMap returns new OptVBucketServerMap with value set to v.
func NewOptVBucketServerMap(v VBucketServerMap) OptVBucketServerMap {
	return OptVBucketServerMap{
		Value: v,
		Set:   true,
	}
}

// OptVBucketServerMap is optional VBucketServerMap.
type OptVBucketServerMap struct {
	Value VBucketServerMap
	Set   bool
}

// IsSet returns true if OptVBucketServerMap was set.
func (o OptVBucketServerMap) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVBucketServerMap) Reset() {
	var v VBucketServerMap
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVBucketServerMap) SetTo(v VBucketServerMap) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVBucketServerMap) Get() (v VBucketServerMap, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVBucketServerMap) Or(d VBucketServerMap) VBucketServerMap {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PoolInfo
type PoolInfo struct {
	Name                   OptString                         `json:"name"`
	Nodes                  []NodeInfo                        `json:"nodes"`
	Buckets                OptPoolInfoBuckets                `json:"buckets"`
	BucketNames            []PoolInfoBucketNamesItem         `json:"bucketNames"`
	RemoteClusters         OptPoolInfoRemoteClusters         `json:"remoteClusters"`
	Alerts                 []jx.Raw                          `json:"alerts"`
	AlertsSilenceURL       OptString                         `json:"alertsSilenceURL"`
	Controllers            OptPoolInfoControllers            `json:"controllers"`
	RebalanceStatus        OptPoolInfoRebalanceStatus        `json:"rebalanceStatus"`
	RebalanceProgressUri   OptString                         `json:"rebalanceProgressUri"`
	StopRebalanceUri       OptString                         `json:"stopRebalanceUri"`
	NodeStatusesUri        OptString                         `json:"nodeStatusesUri"`
	NodeServicesUri        OptString                         `json:"nodeServicesUri"`
	MaxBucketCount         OptInt                            `json:"maxBucketCount"`
	MaxCollectionCount     OptInt                            `json:"maxCollectionCount"`
	MaxScopeCount          OptInt                            `json:"maxScopeCount"`
	AutoCompactionSettings OptPoolInfoAutoCompactionSettings `json:"autoCompactionSettings"`
	Tasks                  OptPoolInfoTasks                  `json:"tasks"`
	Counters               OptPoolInfoCounters               `json:"counters"`
	IndexStatusURI         OptString                         `json:"indexStatusURI"`
	TrustedCAsURI          OptString                         `json:"trustedCAsURI"`
	ClusterName            OptString                         `json:"clusterName"`
	ClusterEncryptionLevel OptPoolInfoClusterEncryptionLevel `json:"clusterEncryptionLevel"`
	Balanced               OptBool                           `json:"balanced"`
	CheckPermissionsURI    OptString                         `json:"checkPermissionsURI"`
	MemoryQuota            OptInt                            `json:"memoryQuota"`
	IndexMemoryQuota       OptInt                            `json:"indexMemoryQuota"`
	FtsMemoryQuota         OptInt                            `json:"ftsMemoryQuota"`
	CbasMemoryQuota        OptInt                            `json:"cbasMemoryQuota"`
	EventingMemoryQuota    OptInt                            `json:"eventingMemoryQuota"`
	StorageTotals          OptPoolInfoStorageTotals          `json:"storageTotals"`
	ServerGroupsUri        OptString                         `json:"serverGroupsUri"`
}

// GetName returns the value of Name.
func (s *PoolInfo) GetName() OptString {
	return s.Name
}

// GetNodes returns the value of Nodes.
func (s *PoolInfo) GetNodes() []NodeInfo {
	return s.Nodes
}

// GetBuckets returns the value of Buckets.
func (s *PoolInfo) GetBuckets() OptPoolInfoBuckets {
	return s.Buckets
}

// GetBucketNames returns the value of BucketNames.
func (s *PoolInfo) GetBucketNames() []PoolInfoBucketNamesItem {
	return s.BucketNames
}

// GetRemoteClusters returns the value of RemoteClusters.
func (s *PoolInfo) GetRemoteClusters() OptPoolInfoRemoteClusters {
	return s.RemoteClusters
}

// GetAlerts returns the value of Alerts.
func (s *PoolInfo) GetAlerts() []jx.Raw {
	return s.Alerts
}

// GetAlertsSilenceURL returns the value of AlertsSilenceURL.
func (s *PoolInfo) GetAlertsSilenceURL() OptString {
	return s.AlertsSilenceURL
}

// GetControllers returns the value of Controllers.
func (s *PoolInfo) GetControllers() OptPoolInfoControllers {
	return s.Controllers
}

// GetRebalanceStatus returns the value of RebalanceStatus.
func (s *PoolInfo) GetRebalanceStatus() OptPoolInfoRebalanceStatus {
	return s.RebalanceStatus
}

// GetRebalanceProgressUri returns the value of RebalanceProgressUri.
func (s *PoolInfo) GetRebalanceProgressUri() OptString {
	return s.RebalanceProgressUri
}

// GetStopRebalanceUri returns the value of StopRebalanceUri.
func (s *PoolInfo) GetStopRebalanceUri() OptString {
	return s.StopRebalanceUri
}

// GetNodeStatusesUri returns the value of NodeStatusesUri.
func (s *PoolInfo) GetNodeStatusesUri() OptString {
	return s.NodeStatusesUri
}

// GetNodeServicesUri returns the value of NodeServicesUri.
func (s *PoolInfo) GetNodeServicesUri() OptString {
	return s.NodeServicesUri
}

// GetMaxBucketCount returns the value of MaxBucketCount.
func (s *PoolInfo) GetMaxBucketCount() OptInt {
	return s.MaxBucketCount
}

// GetMaxCollectionCount returns the value of MaxCollectionCount.
func (s *PoolInfo) GetMaxCollectionCount() OptInt {
	return s.MaxCollectionCount
}

// GetMaxScopeCount returns the value of MaxScopeCount.
func (s *PoolInfo) GetMaxScopeCount() OptInt {
	return s.MaxScopeCount
}

// GetAutoCompactionSettings returns the value of AutoCompactionSettings.
func (s *PoolInfo) GetAutoCompactionSettings() OptPoolInfoAutoCompactionSettings {
	return s.AutoCompactionSettings
}

// GetTasks returns the value of Tasks.
func (s *PoolInfo) GetTasks() OptPoolInfoTasks {
	return s.Tasks
}

// GetCounters returns the value of Counters.
func (s *PoolInfo) GetCounters() OptPoolInfoCounters {
	return s.Counters
}

// GetIndexStatusURI returns the value of IndexStatusURI.
func (s *PoolInfo) GetIndexStatusURI() OptString {
	return s.IndexStatusURI
}

// GetTrustedCAsURI returns the value of TrustedCAsURI.
func (s *PoolInfo) GetTrustedCAsURI() OptString {
	return s.TrustedCAsURI
}

// GetClusterName returns the value of ClusterName.
func (s *PoolInfo) GetClusterName() OptString {
	return s.ClusterName
}

// GetClusterEncryptionLevel returns the value of ClusterEncryptionLevel.
func (s *PoolInfo) GetClusterEncryptionLevel() OptPoolInfoClusterEncryptionLevel {
	return s.ClusterEncryptionLevel
}

// GetBalanced returns the value of Balanced.
func (s *PoolInfo) GetBalanced() OptBool {
	return s.Balanced
}

// GetCheckPermissionsURI returns the value of CheckPermissionsURI.
func (s *PoolInfo) GetCheckPermissionsURI() OptString {
	return s.CheckPermissionsURI
}

// GetMemoryQuota returns the value of MemoryQuota.
func (s *PoolInfo) GetMemoryQuota() OptInt {
	return s.MemoryQuota
}

// GetIndexMemoryQuota returns the value of IndexMemoryQuota.
func (s *PoolInfo) GetIndexMemoryQuota() OptInt {
	return s.IndexMemoryQuota
}

// GetFtsMemoryQuota returns the value of FtsMemoryQuota.
func (s *PoolInfo) GetFtsMemoryQuota() OptInt {
	return s.FtsMemoryQuota
}

// GetCbasMemoryQuota returns the value of CbasMemoryQuota.
func (s *PoolInfo) GetCbasMemoryQuota() OptInt {
	return s.CbasMemoryQuota
}

// GetEventingMemoryQuota returns the value of EventingMemoryQuota.
func (s *PoolInfo) GetEventingMemoryQuota() OptInt {
	return s.EventingMemoryQuota
}

// GetStorageTotals returns the value of StorageTotals.
func (s *PoolInfo) GetStorageTotals() OptPoolInfoStorageTotals {
	return s.StorageTotals
}

// GetServerGroupsUri returns the value of ServerGroupsUri.
func (s *PoolInfo) GetServerGroupsUri() OptString {
	return s.ServerGroupsUri
}

// SetName sets the value of Name.
func (s *PoolInfo) SetName(val OptString) {
	s.Name = val
}

// SetNodes sets the value of Nodes.
func (s *PoolInfo) SetNodes(val []NodeInfo) {
	s.Nodes = val
}

// SetBuckets sets the value of Buckets.
func (s *PoolInfo) SetBuckets(val OptPoolInfoBuckets) {
	s.Buckets = val
}

// SetBucketNames sets the value of BucketNames.
func (s *PoolInfo) SetBucketNames(val []PoolInfoBucketNamesItem) {
	s.BucketNames = val
}

// SetRemoteClusters sets the value of RemoteClusters.
func (s *PoolInfo) SetRemoteClusters(val OptPoolInfoRemoteClusters) {
	s.RemoteClusters = val
}

// SetAlerts sets the value of Alerts.
func (s *PoolInfo) SetAlerts(val []jx.Raw) {
	s.Alerts = val
}

// SetAlertsSilenceURL sets the value of AlertsSilenceURL.
func (s *PoolInfo) SetAlertsSilenceURL(val OptString) {
	s.AlertsSilenceURL = val
}

// SetControllers sets the value of Controllers.
func (s *PoolInfo) SetControllers(val OptPoolInfoControllers) {
	s.Controllers = val
}

// SetRebalanceStatus sets the value of RebalanceStatus.
func (s *PoolInfo) SetRebalanceStatus(val OptPoolInfoRebalanceStatus) {
	s.RebalanceStatus = val
}

// SetRebalanceProgressUri sets the value of RebalanceProgressUri.
func (s *PoolInfo) SetRebalanceProgressUri(val OptString) {
	s.RebalanceProgressUri = val
}

// SetStopRebalanceUri sets the value of StopRebalanceUri.
func (s *PoolInfo) SetStopRebalanceUri(val OptString) {
	s.StopRebalanceUri = val
}

// SetNodeStatusesUri sets the value of NodeStatusesUri.
func (s *PoolInfo) SetNodeStatusesUri(val OptString) {
	s.NodeStatusesUri = val
}

// SetNodeServicesUri sets the value of NodeServicesUri.
func (s *PoolInfo) SetNodeServicesUri(val OptString) {
	s.NodeServicesUri = val
}

// SetMaxBucketCount sets the value of MaxBucketCount.
func (s *PoolInfo) SetMaxBucketCount(val OptInt) {
	s.MaxBucketCount = val
}

// SetMaxCollectionCount sets the value of MaxCollectionCount.
func (s *PoolInfo) SetMaxCollectionCount(val OptInt) {
	s.MaxCollectionCount = val
}

// SetMaxScopeCount sets the value of MaxScopeCount.
func (s *PoolInfo) SetMaxScopeCount(val OptInt) {
	s.MaxScopeCount = val
}

// SetAutoCompactionSettings sets the value of AutoCompactionSettings.
func (s *PoolInfo) SetAutoCompactionSettings(val OptPoolInfoAutoCompactionSettings) {
	s.AutoCompactionSettings = val
}

// SetTasks sets the value of Tasks.
func (s *PoolInfo) SetTasks(val OptPoolInfoTasks) {
	s.Tasks = val
}

// SetCounters sets the value of Counters.
func (s *PoolInfo) SetCounters(val OptPoolInfoCounters) {
	s.Counters = val
}

// SetIndexStatusURI sets the value of IndexStatusURI.
func (s *PoolInfo) SetIndexStatusURI(val OptString) {
	s.IndexStatusURI = val
}

// SetTrustedCAsURI sets the value of TrustedCAsURI.
func (s *PoolInfo) SetTrustedCAsURI(val OptString) {
	s.TrustedCAsURI = val
}

// SetClusterName sets the value of ClusterName.
func (s *PoolInfo) SetClusterName(val OptString) {
	s.ClusterName = val
}

// SetClusterEncryptionLevel sets the value of ClusterEncryptionLevel.
func (s *PoolInfo) SetClusterEncryptionLevel(val OptPoolInfoClusterEncryptionLevel) {
	s.ClusterEncryptionLevel = val
}

// SetBalanced sets the value of Balanced.
func (s *PoolInfo) SetBalanced(val OptBool) {
	s.Balanced = val
}

// SetCheckPermissionsURI sets the value of CheckPermissionsURI.
func (s *PoolInfo) SetCheckPermissionsURI(val OptString) {
	s.CheckPermissionsURI = val
}

// SetMemoryQuota sets the value of MemoryQuota.
func (s *PoolInfo) SetMemoryQuota(val OptInt) {
	s.MemoryQuota = val
}

// SetIndexMemoryQuota sets the value of IndexMemoryQuota.
func (s *PoolInfo) SetIndexMemoryQuota(val OptInt) {
	s.IndexMemoryQuota = val
}

// SetFtsMemoryQuota sets the value of FtsMemoryQuota.
func (s *PoolInfo) SetFtsMemoryQuota(val OptInt) {
	s.FtsMemoryQuota = val
}

// SetCbasMemoryQuota sets the value of CbasMemoryQuota.
func (s *PoolInfo) SetCbasMemoryQuota(val OptInt) {
	s.CbasMemoryQuota = val
}

// SetEventingMemoryQuota sets the value of EventingMemoryQuota.
func (s *PoolInfo) SetEventingMemoryQuota(val OptInt) {
	s.EventingMemoryQuota = val
}

// SetStorageTotals sets the value of StorageTotals.
func (s *PoolInfo) SetStorageTotals(val OptPoolInfoStorageTotals) {
	s.StorageTotals = val
}

// SetServerGroupsUri sets the value of ServerGroupsUri.
func (s *PoolInfo) SetServerGroupsUri(val OptString) {
	s.ServerGroupsUri = val
}

type PoolInfoAutoCompactionSettings struct {
	ParallelDBAndViewCompaction    OptBool                                                         `json:"parallelDBAndViewCompaction"`
	MagmaFragmentationPercentage   OptInt                                                          `json:"magmaFragmentationPercentage"`
	DatabaseFragmentationThreshold OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold `json:"databaseFragmentationThreshold"`
	IndexCompactionMode            OptPoolInfoAutoCompactionSettingsIndexCompactionMode            `json:"indexCompactionMode"`
	IndexCircularCompaction        OptPoolInfoAutoCompactionSettingsIndexCircularCompaction        `json:"indexCircularCompaction"`
	IndexFragmentationThreshold    OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold    `json:"indexFragmentationThreshold"`
}

// GetParallelDBAndViewCompaction returns the value of ParallelDBAndViewCompaction.
func (s *PoolInfoAutoCompactionSettings) GetParallelDBAndViewCompaction() OptBool {
	return s.ParallelDBAndViewCompaction
}

// GetMagmaFragmentationPercentage returns the value of MagmaFragmentationPercentage.
func (s *PoolInfoAutoCompactionSettings) GetMagmaFragmentationPercentage() OptInt {
	return s.MagmaFragmentationPercentage
}

// GetDatabaseFragmentationThreshold returns the value of DatabaseFragmentationThreshold.
func (s *PoolInfoAutoCompactionSettings) GetDatabaseFragmentationThreshold() OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold {
	return s.DatabaseFragmentationThreshold
}

// GetIndexCompactionMode returns the value of IndexCompactionMode.
func (s *PoolInfoAutoCompactionSettings) GetIndexCompactionMode() OptPoolInfoAutoCompactionSettingsIndexCompactionMode {
	return s.IndexCompactionMode
}

// GetIndexCircularCompaction returns the value of IndexCircularCompaction.
func (s *PoolInfoAutoCompactionSettings) GetIndexCircularCompaction() OptPoolInfoAutoCompactionSettingsIndexCircularCompaction {
	return s.IndexCircularCompaction
}

// GetIndexFragmentationThreshold returns the value of IndexFragmentationThreshold.
func (s *PoolInfoAutoCompactionSettings) GetIndexFragmentationThreshold() OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold {
	return s.IndexFragmentationThreshold
}

// SetParallelDBAndViewCompaction sets the value of ParallelDBAndViewCompaction.
func (s *PoolInfoAutoCompactionSettings) SetParallelDBAndViewCompaction(val OptBool) {
	s.ParallelDBAndViewCompaction = val
}

// SetMagmaFragmentationPercentage sets the value of MagmaFragmentationPercentage.
func (s *PoolInfoAutoCompactionSettings) SetMagmaFragmentationPercentage(val OptInt) {
	s.MagmaFragmentationPercentage = val
}

// SetDatabaseFragmentationThreshold sets the value of DatabaseFragmentationThreshold.
func (s *PoolInfoAutoCompactionSettings) SetDatabaseFragmentationThreshold(val OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) {
	s.DatabaseFragmentationThreshold = val
}

// SetIndexCompactionMode sets the value of IndexCompactionMode.
func (s *PoolInfoAutoCompactionSettings) SetIndexCompactionMode(val OptPoolInfoAutoCompactionSettingsIndexCompactionMode) {
	s.IndexCompactionMode = val
}

// SetIndexCircularCompaction sets the value of IndexCircularCompaction.
func (s *PoolInfoAutoCompactionSettings) SetIndexCircularCompaction(val OptPoolInfoAutoCompactionSettingsIndexCircularCompaction) {
	s.IndexCircularCompaction = val
}

// SetIndexFragmentationThreshold sets the value of IndexFragmentationThreshold.
func (s *PoolInfoAutoCompactionSettings) SetIndexFragmentationThreshold(val OptPoolInfoAutoCompactionSettingsIndexFragmentationThreshold) {
	s.IndexFragmentationThreshold = val
}

type PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold struct {
	Percentage OptInt                                                              `json:"percentage"`
	Size       OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize `json:"size"`
}

// GetPercentage returns the value of Percentage.
func (s *PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) GetPercentage() OptInt {
	return s.Percentage
}

// GetSize returns the value of Size.
func (s *PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) GetSize() OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize {
	return s.Size
}

// SetPercentage sets the value of Percentage.
func (s *PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) SetPercentage(val OptInt) {
	s.Percentage = val
}

// SetSize sets the value of Size.
func (s *PoolInfoAutoCompactionSettingsDatabaseFragmentationThreshold) SetSize(val OptPoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) {
	s.Size = val
}

type PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize string

const (
	PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSizeUndefined PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize = "undefined"
)

// AllValues returns all PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize values.
func (PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) AllValues() []PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize {
	return []PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize{
		PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSizeUndefined,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) MarshalText() ([]byte, error) {
	switch s {
	case PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSizeUndefined:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize) UnmarshalText(data []byte) error {
	switch PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSize(data) {
	case PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSizeUndefined:
		*s = PoolInfoAutoCompactionSettingsDatabaseFragmentationThresholdSizeUndefined
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PoolInfoAutoCompactionSettingsIndexCircularCompaction struct {
	DaysOfWeek OptString                                                        `json:"daysOfWeek"`
	Interval   OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval `json:"interval"`
}

// GetDaysOfWeek returns the value of DaysOfWeek.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompaction) GetDaysOfWeek() OptString {
	return s.DaysOfWeek
}

// GetInterval returns the value of Interval.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompaction) GetInterval() OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval {
	return s.Interval
}

// SetDaysOfWeek sets the value of DaysOfWeek.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompaction) SetDaysOfWeek(val OptString) {
	s.DaysOfWeek = val
}

// SetInterval sets the value of Interval.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompaction) SetInterval(val OptPoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) {
	s.Interval = val
}

type PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval struct {
	FromHour     OptInt  `json:"fromHour"`
	ToHour       OptInt  `json:"toHour"`
	FromMinute   OptInt  `json:"fromMinute"`
	ToMinute     OptInt  `json:"toMinute"`
	AbortOutside OptBool `json:"abortOutside"`
}

// GetFromHour returns the value of FromHour.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) GetFromHour() OptInt {
	return s.FromHour
}

// GetToHour returns the value of ToHour.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) GetToHour() OptInt {
	return s.ToHour
}

// GetFromMinute returns the value of FromMinute.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) GetFromMinute() OptInt {
	return s.FromMinute
}

// GetToMinute returns the value of ToMinute.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) GetToMinute() OptInt {
	return s.ToMinute
}

// GetAbortOutside returns the value of AbortOutside.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) GetAbortOutside() OptBool {
	return s.AbortOutside
}

// SetFromHour sets the value of FromHour.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) SetFromHour(val OptInt) {
	s.FromHour = val
}

// SetToHour sets the value of ToHour.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) SetToHour(val OptInt) {
	s.ToHour = val
}

// SetFromMinute sets the value of FromMinute.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) SetFromMinute(val OptInt) {
	s.FromMinute = val
}

// SetToMinute sets the value of ToMinute.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) SetToMinute(val OptInt) {
	s.ToMinute = val
}

// SetAbortOutside sets the value of AbortOutside.
func (s *PoolInfoAutoCompactionSettingsIndexCircularCompactionInterval) SetAbortOutside(val OptBool) {
	s.AbortOutside = val
}

type PoolInfoAutoCompactionSettingsIndexCompactionMode string

const (
	PoolInfoAutoCompactionSettingsIndexCompactionModeCircular PoolInfoAutoCompactionSettingsIndexCompactionMode = "circular"
)

// AllValues returns all PoolInfoAutoCompactionSettingsIndexCompactionMode values.
func (PoolInfoAutoCompactionSettingsIndexCompactionMode) AllValues() []PoolInfoAutoCompactionSettingsIndexCompactionMode {
	return []PoolInfoAutoCompactionSettingsIndexCompactionMode{
		PoolInfoAutoCompactionSettingsIndexCompactionModeCircular,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolInfoAutoCompactionSettingsIndexCompactionMode) MarshalText() ([]byte, error) {
	switch s {
	case PoolInfoAutoCompactionSettingsIndexCompactionModeCircular:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolInfoAutoCompactionSettingsIndexCompactionMode) UnmarshalText(data []byte) error {
	switch PoolInfoAutoCompactionSettingsIndexCompactionMode(data) {
	case PoolInfoAutoCompactionSettingsIndexCompactionModeCircular:
		*s = PoolInfoAutoCompactionSettingsIndexCompactionModeCircular
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PoolInfoAutoCompactionSettingsIndexFragmentationThreshold struct {
	Percentage OptInt `json:"percentage"`
}

// GetPercentage returns the value of Percentage.
func (s *PoolInfoAutoCompactionSettingsIndexFragmentationThreshold) GetPercentage() OptInt {
	return s.Percentage
}

// SetPercentage sets the value of Percentage.
func (s *PoolInfoAutoCompactionSettingsIndexFragmentationThreshold) SetPercentage(val OptInt) {
	s.Percentage = val
}

type PoolInfoBucketNamesItem struct {
	BucketName OptString `json:"bucketName"`
	UUID       OptString `json:"uuid"`
}

// GetBucketName returns the value of BucketName.
func (s *PoolInfoBucketNamesItem) GetBucketName() OptString {
	return s.BucketName
}

// GetUUID returns the value of UUID.
func (s *PoolInfoBucketNamesItem) GetUUID() OptString {
	return s.UUID
}

// SetBucketName sets the value of BucketName.
func (s *PoolInfoBucketNamesItem) SetBucketName(val OptString) {
	s.BucketName = val
}

// SetUUID sets the value of UUID.
func (s *PoolInfoBucketNamesItem) SetUUID(val OptString) {
	s.UUID = val
}

type PoolInfoBuckets struct {
	URI                       OptString `json:"uri"`
	TerseBucketsBase          OptString `json:"terseBucketsBase"`
	TerseStreamingBucketsBase OptString `json:"terseStreamingBucketsBase"`
}

// GetURI returns the value of URI.
func (s *PoolInfoBuckets) GetURI() OptString {
	return s.URI
}

// GetTerseBucketsBase returns the value of TerseBucketsBase.
func (s *PoolInfoBuckets) GetTerseBucketsBase() OptString {
	return s.TerseBucketsBase
}

// GetTerseStreamingBucketsBase returns the value of TerseStreamingBucketsBase.
func (s *PoolInfoBuckets) GetTerseStreamingBucketsBase() OptString {
	return s.TerseStreamingBucketsBase
}

// SetURI sets the value of URI.
func (s *PoolInfoBuckets) SetURI(val OptString) {
	s.URI = val
}

// SetTerseBucketsBase sets the value of TerseBucketsBase.
func (s *PoolInfoBuckets) SetTerseBucketsBase(val OptString) {
	s.TerseBucketsBase = val
}

// SetTerseStreamingBucketsBase sets the value of TerseStreamingBucketsBase.
func (s *PoolInfoBuckets) SetTerseStreamingBucketsBase(val OptString) {
	s.TerseStreamingBucketsBase = val
}

type PoolInfoClusterEncryptionLevel string

const (
	PoolInfoClusterEncryptionLevelNone PoolInfoClusterEncryptionLevel = "none"
)

// AllValues returns all PoolInfoClusterEncryptionLevel values.
func (PoolInfoClusterEncryptionLevel) AllValues() []PoolInfoClusterEncryptionLevel {
	return []PoolInfoClusterEncryptionLevel{
		PoolInfoClusterEncryptionLevelNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolInfoClusterEncryptionLevel) MarshalText() ([]byte, error) {
	switch s {
	case PoolInfoClusterEncryptionLevelNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolInfoClusterEncryptionLevel) UnmarshalText(data []byte) error {
	switch PoolInfoClusterEncryptionLevel(data) {
	case PoolInfoClusterEncryptionLevelNone:
		*s = PoolInfoClusterEncryptionLevelNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PoolInfoControllers struct {
	AddNode               OptPoolInfoControllersAddNode               `json:"addNode"`
	Rebalance             OptPoolInfoControllersRebalance             `json:"rebalance"`
	FailOver              OptPoolInfoControllersFailOver              `json:"failOver"`
	StartGracefulFailover OptPoolInfoControllersStartGracefulFailover `json:"startGracefulFailover"`
	ReAddNode             OptPoolInfoControllersReAddNode             `json:"reAddNode"`
	ReFailOver            OptPoolInfoControllersReFailOver            `json:"reFailOver"`
	EjectNode             OptPoolInfoControllersEjectNode             `json:"ejectNode"`
	SetRecoveryType       OptPoolInfoControllersSetRecoveryType       `json:"setRecoveryType"`
	SetAutoCompaction     OptPoolInfoControllersSetAutoCompaction     `json:"setAutoCompaction"`
	ClusterLogsCollection OptPoolInfoControllersClusterLogsCollection `json:"clusterLogsCollection"`
	Replication           OptPoolInfoControllersReplication           `json:"replication"`
}

// GetAddNode returns the value of AddNode.
func (s *PoolInfoControllers) GetAddNode() OptPoolInfoControllersAddNode {
	return s.AddNode
}

// GetRebalance returns the value of Rebalance.
func (s *PoolInfoControllers) GetRebalance() OptPoolInfoControllersRebalance {
	return s.Rebalance
}

// GetFailOver returns the value of FailOver.
func (s *PoolInfoControllers) GetFailOver() OptPoolInfoControllersFailOver {
	return s.FailOver
}

// GetStartGracefulFailover returns the value of StartGracefulFailover.
func (s *PoolInfoControllers) GetStartGracefulFailover() OptPoolInfoControllersStartGracefulFailover {
	return s.StartGracefulFailover
}

// GetReAddNode returns the value of ReAddNode.
func (s *PoolInfoControllers) GetReAddNode() OptPoolInfoControllersReAddNode {
	return s.ReAddNode
}

// GetReFailOver returns the value of ReFailOver.
func (s *PoolInfoControllers) GetReFailOver() OptPoolInfoControllersReFailOver {
	return s.ReFailOver
}

// GetEjectNode returns the value of EjectNode.
func (s *PoolInfoControllers) GetEjectNode() OptPoolInfoControllersEjectNode {
	return s.EjectNode
}

// GetSetRecoveryType returns the value of SetRecoveryType.
func (s *PoolInfoControllers) GetSetRecoveryType() OptPoolInfoControllersSetRecoveryType {
	return s.SetRecoveryType
}

// GetSetAutoCompaction returns the value of SetAutoCompaction.
func (s *PoolInfoControllers) GetSetAutoCompaction() OptPoolInfoControllersSetAutoCompaction {
	return s.SetAutoCompaction
}

// GetClusterLogsCollection returns the value of ClusterLogsCollection.
func (s *PoolInfoControllers) GetClusterLogsCollection() OptPoolInfoControllersClusterLogsCollection {
	return s.ClusterLogsCollection
}

// GetReplication returns the value of Replication.
func (s *PoolInfoControllers) GetReplication() OptPoolInfoControllersReplication {
	return s.Replication
}

// SetAddNode sets the value of AddNode.
func (s *PoolInfoControllers) SetAddNode(val OptPoolInfoControllersAddNode) {
	s.AddNode = val
}

// SetRebalance sets the value of Rebalance.
func (s *PoolInfoControllers) SetRebalance(val OptPoolInfoControllersRebalance) {
	s.Rebalance = val
}

// SetFailOver sets the value of FailOver.
func (s *PoolInfoControllers) SetFailOver(val OptPoolInfoControllersFailOver) {
	s.FailOver = val
}

// SetStartGracefulFailover sets the value of StartGracefulFailover.
func (s *PoolInfoControllers) SetStartGracefulFailover(val OptPoolInfoControllersStartGracefulFailover) {
	s.StartGracefulFailover = val
}

// SetReAddNode sets the value of ReAddNode.
func (s *PoolInfoControllers) SetReAddNode(val OptPoolInfoControllersReAddNode) {
	s.ReAddNode = val
}

// SetReFailOver sets the value of ReFailOver.
func (s *PoolInfoControllers) SetReFailOver(val OptPoolInfoControllersReFailOver) {
	s.ReFailOver = val
}

// SetEjectNode sets the value of EjectNode.
func (s *PoolInfoControllers) SetEjectNode(val OptPoolInfoControllersEjectNode) {
	s.EjectNode = val
}

// SetSetRecoveryType sets the value of SetRecoveryType.
func (s *PoolInfoControllers) SetSetRecoveryType(val OptPoolInfoControllersSetRecoveryType) {
	s.SetRecoveryType = val
}

// SetSetAutoCompaction sets the value of SetAutoCompaction.
func (s *PoolInfoControllers) SetSetAutoCompaction(val OptPoolInfoControllersSetAutoCompaction) {
	s.SetAutoCompaction = val
}

// SetClusterLogsCollection sets the value of ClusterLogsCollection.
func (s *PoolInfoControllers) SetClusterLogsCollection(val OptPoolInfoControllersClusterLogsCollection) {
	s.ClusterLogsCollection = val
}

// SetReplication sets the value of Replication.
func (s *PoolInfoControllers) SetReplication(val OptPoolInfoControllersReplication) {
	s.Replication = val
}

type PoolInfoControllersAddNode struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersAddNode) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersAddNode) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersClusterLogsCollection struct {
	StartURI  OptString `json:"startURI"`
	CancelURI OptString `json:"cancelURI"`
}

// GetStartURI returns the value of StartURI.
func (s *PoolInfoControllersClusterLogsCollection) GetStartURI() OptString {
	return s.StartURI
}

// GetCancelURI returns the value of CancelURI.
func (s *PoolInfoControllersClusterLogsCollection) GetCancelURI() OptString {
	return s.CancelURI
}

// SetStartURI sets the value of StartURI.
func (s *PoolInfoControllersClusterLogsCollection) SetStartURI(val OptString) {
	s.StartURI = val
}

// SetCancelURI sets the value of CancelURI.
func (s *PoolInfoControllersClusterLogsCollection) SetCancelURI(val OptString) {
	s.CancelURI = val
}

type PoolInfoControllersEjectNode struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersEjectNode) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersEjectNode) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersFailOver struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersFailOver) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersFailOver) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersReAddNode struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersReAddNode) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersReAddNode) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersReFailOver struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersReFailOver) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersReFailOver) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersRebalance struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersRebalance) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersRebalance) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersReplication struct {
	CreateURI   OptString `json:"createURI"`
	ValidateURI OptString `json:"validateURI"`
}

// GetCreateURI returns the value of CreateURI.
func (s *PoolInfoControllersReplication) GetCreateURI() OptString {
	return s.CreateURI
}

// GetValidateURI returns the value of ValidateURI.
func (s *PoolInfoControllersReplication) GetValidateURI() OptString {
	return s.ValidateURI
}

// SetCreateURI sets the value of CreateURI.
func (s *PoolInfoControllersReplication) SetCreateURI(val OptString) {
	s.CreateURI = val
}

// SetValidateURI sets the value of ValidateURI.
func (s *PoolInfoControllersReplication) SetValidateURI(val OptString) {
	s.ValidateURI = val
}

type PoolInfoControllersSetAutoCompaction struct {
	URI         OptString `json:"uri"`
	ValidateURI OptString `json:"validateURI"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersSetAutoCompaction) GetURI() OptString {
	return s.URI
}

// GetValidateURI returns the value of ValidateURI.
func (s *PoolInfoControllersSetAutoCompaction) GetValidateURI() OptString {
	return s.ValidateURI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersSetAutoCompaction) SetURI(val OptString) {
	s.URI = val
}

// SetValidateURI sets the value of ValidateURI.
func (s *PoolInfoControllersSetAutoCompaction) SetValidateURI(val OptString) {
	s.ValidateURI = val
}

type PoolInfoControllersSetRecoveryType struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersSetRecoveryType) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersSetRecoveryType) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoControllersStartGracefulFailover struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoControllersStartGracefulFailover) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoControllersStartGracefulFailover) SetURI(val OptString) {
	s.URI = val
}

type PoolInfoCounters struct {
	RebalanceSuccess OptInt `json:"rebalance_success"`
	RebalanceStart   OptInt `json:"rebalance_start"`
}

// GetRebalanceSuccess returns the value of RebalanceSuccess.
func (s *PoolInfoCounters) GetRebalanceSuccess() OptInt {
	return s.RebalanceSuccess
}

// GetRebalanceStart returns the value of RebalanceStart.
func (s *PoolInfoCounters) GetRebalanceStart() OptInt {
	return s.RebalanceStart
}

// SetRebalanceSuccess sets the value of RebalanceSuccess.
func (s *PoolInfoCounters) SetRebalanceSuccess(val OptInt) {
	s.RebalanceSuccess = val
}

// SetRebalanceStart sets the value of RebalanceStart.
func (s *PoolInfoCounters) SetRebalanceStart(val OptInt) {
	s.RebalanceStart = val
}

type PoolInfoRebalanceStatus string

const (
	PoolInfoRebalanceStatusNone PoolInfoRebalanceStatus = "none"
)

// AllValues returns all PoolInfoRebalanceStatus values.
func (PoolInfoRebalanceStatus) AllValues() []PoolInfoRebalanceStatus {
	return []PoolInfoRebalanceStatus{
		PoolInfoRebalanceStatusNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolInfoRebalanceStatus) MarshalText() ([]byte, error) {
	switch s {
	case PoolInfoRebalanceStatusNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolInfoRebalanceStatus) UnmarshalText(data []byte) error {
	switch PoolInfoRebalanceStatus(data) {
	case PoolInfoRebalanceStatusNone:
		*s = PoolInfoRebalanceStatusNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PoolInfoRemoteClusters struct {
	URI         OptString `json:"uri"`
	ValidateURI OptString `json:"validateURI"`
}

// GetURI returns the value of URI.
func (s *PoolInfoRemoteClusters) GetURI() OptString {
	return s.URI
}

// GetValidateURI returns the value of ValidateURI.
func (s *PoolInfoRemoteClusters) GetValidateURI() OptString {
	return s.ValidateURI
}

// SetURI sets the value of URI.
func (s *PoolInfoRemoteClusters) SetURI(val OptString) {
	s.URI = val
}

// SetValidateURI sets the value of ValidateURI.
func (s *PoolInfoRemoteClusters) SetValidateURI(val OptString) {
	s.ValidateURI = val
}

type PoolInfoStorageTotals struct {
	RAM OptPoolInfoStorageTotalsRAM `json:"ram"`
	Hdd OptPoolInfoStorageTotalsHdd `json:"hdd"`
}

// GetRAM returns the value of RAM.
func (s *PoolInfoStorageTotals) GetRAM() OptPoolInfoStorageTotalsRAM {
	return s.RAM
}

// GetHdd returns the value of Hdd.
func (s *PoolInfoStorageTotals) GetHdd() OptPoolInfoStorageTotalsHdd {
	return s.Hdd
}

// SetRAM sets the value of RAM.
func (s *PoolInfoStorageTotals) SetRAM(val OptPoolInfoStorageTotalsRAM) {
	s.RAM = val
}

// SetHdd sets the value of Hdd.
func (s *PoolInfoStorageTotals) SetHdd(val OptPoolInfoStorageTotalsHdd) {
	s.Hdd = val
}

type PoolInfoStorageTotalsHdd struct {
	Total      OptInt `json:"total"`
	QuotaTotal OptInt `json:"quotaTotal"`
	Used       OptInt `json:"used"`
	UsedByData OptInt `json:"usedByData"`
	Free       OptInt `json:"free"`
}

// GetTotal returns the value of Total.
func (s *PoolInfoStorageTotalsHdd) GetTotal() OptInt {
	return s.Total
}

// GetQuotaTotal returns the value of QuotaTotal.
func (s *PoolInfoStorageTotalsHdd) GetQuotaTotal() OptInt {
	return s.QuotaTotal
}

// GetUsed returns the value of Used.
func (s *PoolInfoStorageTotalsHdd) GetUsed() OptInt {
	return s.Used
}

// GetUsedByData returns the value of UsedByData.
func (s *PoolInfoStorageTotalsHdd) GetUsedByData() OptInt {
	return s.UsedByData
}

// GetFree returns the value of Free.
func (s *PoolInfoStorageTotalsHdd) GetFree() OptInt {
	return s.Free
}

// SetTotal sets the value of Total.
func (s *PoolInfoStorageTotalsHdd) SetTotal(val OptInt) {
	s.Total = val
}

// SetQuotaTotal sets the value of QuotaTotal.
func (s *PoolInfoStorageTotalsHdd) SetQuotaTotal(val OptInt) {
	s.QuotaTotal = val
}

// SetUsed sets the value of Used.
func (s *PoolInfoStorageTotalsHdd) SetUsed(val OptInt) {
	s.Used = val
}

// SetUsedByData sets the value of UsedByData.
func (s *PoolInfoStorageTotalsHdd) SetUsedByData(val OptInt) {
	s.UsedByData = val
}

// SetFree sets the value of Free.
func (s *PoolInfoStorageTotalsHdd) SetFree(val OptInt) {
	s.Free = val
}

type PoolInfoStorageTotalsRAM struct {
	Total             OptInt `json:"total"`
	QuotaTotal        OptInt `json:"quotaTotal"`
	QuotaUsed         OptInt `json:"quotaUsed"`
	Used              OptInt `json:"used"`
	UsedByData        OptInt `json:"usedByData"`
	QuotaUsedPerNode  OptInt `json:"quotaUsedPerNode"`
	QuotaTotalPerNode OptInt `json:"quotaTotalPerNode"`
}

// GetTotal returns the value of Total.
func (s *PoolInfoStorageTotalsRAM) GetTotal() OptInt {
	return s.Total
}

// GetQuotaTotal returns the value of QuotaTotal.
func (s *PoolInfoStorageTotalsRAM) GetQuotaTotal() OptInt {
	return s.QuotaTotal
}

// GetQuotaUsed returns the value of QuotaUsed.
func (s *PoolInfoStorageTotalsRAM) GetQuotaUsed() OptInt {
	return s.QuotaUsed
}

// GetUsed returns the value of Used.
func (s *PoolInfoStorageTotalsRAM) GetUsed() OptInt {
	return s.Used
}

// GetUsedByData returns the value of UsedByData.
func (s *PoolInfoStorageTotalsRAM) GetUsedByData() OptInt {
	return s.UsedByData
}

// GetQuotaUsedPerNode returns the value of QuotaUsedPerNode.
func (s *PoolInfoStorageTotalsRAM) GetQuotaUsedPerNode() OptInt {
	return s.QuotaUsedPerNode
}

// GetQuotaTotalPerNode returns the value of QuotaTotalPerNode.
func (s *PoolInfoStorageTotalsRAM) GetQuotaTotalPerNode() OptInt {
	return s.QuotaTotalPerNode
}

// SetTotal sets the value of Total.
func (s *PoolInfoStorageTotalsRAM) SetTotal(val OptInt) {
	s.Total = val
}

// SetQuotaTotal sets the value of QuotaTotal.
func (s *PoolInfoStorageTotalsRAM) SetQuotaTotal(val OptInt) {
	s.QuotaTotal = val
}

// SetQuotaUsed sets the value of QuotaUsed.
func (s *PoolInfoStorageTotalsRAM) SetQuotaUsed(val OptInt) {
	s.QuotaUsed = val
}

// SetUsed sets the value of Used.
func (s *PoolInfoStorageTotalsRAM) SetUsed(val OptInt) {
	s.Used = val
}

// SetUsedByData sets the value of UsedByData.
func (s *PoolInfoStorageTotalsRAM) SetUsedByData(val OptInt) {
	s.UsedByData = val
}

// SetQuotaUsedPerNode sets the value of QuotaUsedPerNode.
func (s *PoolInfoStorageTotalsRAM) SetQuotaUsedPerNode(val OptInt) {
	s.QuotaUsedPerNode = val
}

// SetQuotaTotalPerNode sets the value of QuotaTotalPerNode.
func (s *PoolInfoStorageTotalsRAM) SetQuotaTotalPerNode(val OptInt) {
	s.QuotaTotalPerNode = val
}

type PoolInfoTasks struct {
	URI OptString `json:"uri"`
}

// GetURI returns the value of URI.
func (s *PoolInfoTasks) GetURI() OptString {
	return s.URI
}

// SetURI sets the value of URI.
func (s *PoolInfoTasks) SetURI(val OptString) {
	s.URI = val
}

// Ref: #/components/schemas/PoolsInfo
type PoolsInfo struct {
	IsAdminCreds          OptBool                       `json:"isAdminCreds"`
	IsROAdminCreds        OptBool                       `json:"isROAdminCreds"`
	AllowedServices       []string                      `json:"allowedServices"`
	IsDeveloperPreview    OptBool                       `json:"isDeveloperPreview"`
	PackageVariant        OptString                     `json:"packageVariant"`
	Pools                 []PoolsInfoPoolsItem          `json:"pools"`
	Settings              OptPoolsInfoSettings          `json:"settings"`
	UUID                  OptString                     `json:"uuid"`
	ImplementationVersion OptString                     `json:"implementationVersion"`
	ComponentsVersion     OptPoolsInfoComponentsVersion `json:"componentsVersion"`
}

// GetIsAdminCreds returns the value of IsAdminCreds.
func (s *PoolsInfo) GetIsAdminCreds() OptBool {
	return s.IsAdminCreds
}

// GetIsROAdminCreds returns the value of IsROAdminCreds.
func (s *PoolsInfo) GetIsROAdminCreds() OptBool {
	return s.IsROAdminCreds
}

// GetAllowedServices returns the value of AllowedServices.
func (s *PoolsInfo) GetAllowedServices() []string {
	return s.AllowedServices
}

// GetIsDeveloperPreview returns the value of IsDeveloperPreview.
func (s *PoolsInfo) GetIsDeveloperPreview() OptBool {
	return s.IsDeveloperPreview
}

// GetPackageVariant returns the value of PackageVariant.
func (s *PoolsInfo) GetPackageVariant() OptString {
	return s.PackageVariant
}

// GetPools returns the value of Pools.
func (s *PoolsInfo) GetPools() []PoolsInfoPoolsItem {
	return s.Pools
}

// GetSettings returns the value of Settings.
func (s *PoolsInfo) GetSettings() OptPoolsInfoSettings {
	return s.Settings
}

// GetUUID returns the value of UUID.
func (s *PoolsInfo) GetUUID() OptString {
	return s.UUID
}

// GetImplementationVersion returns the value of ImplementationVersion.
func (s *PoolsInfo) GetImplementationVersion() OptString {
	return s.ImplementationVersion
}

// GetComponentsVersion returns the value of ComponentsVersion.
func (s *PoolsInfo) GetComponentsVersion() OptPoolsInfoComponentsVersion {
	return s.ComponentsVersion
}

// SetIsAdminCreds sets the value of IsAdminCreds.
func (s *PoolsInfo) SetIsAdminCreds(val OptBool) {
	s.IsAdminCreds = val
}

// SetIsROAdminCreds sets the value of IsROAdminCreds.
func (s *PoolsInfo) SetIsROAdminCreds(val OptBool) {
	s.IsROAdminCreds = val
}

// SetAllowedServices sets the value of AllowedServices.
func (s *PoolsInfo) SetAllowedServices(val []string) {
	s.AllowedServices = val
}

// SetIsDeveloperPreview sets the value of IsDeveloperPreview.
func (s *PoolsInfo) SetIsDeveloperPreview(val OptBool) {
	s.IsDeveloperPreview = val
}

// SetPackageVariant sets the value of PackageVariant.
func (s *PoolsInfo) SetPackageVariant(val OptString) {
	s.PackageVariant = val
}

// SetPools sets the value of Pools.
func (s *PoolsInfo) SetPools(val []PoolsInfoPoolsItem) {
	s.Pools = val
}

// SetSettings sets the value of Settings.
func (s *PoolsInfo) SetSettings(val OptPoolsInfoSettings) {
	s.Settings = val
}

// SetUUID sets the value of UUID.
func (s *PoolsInfo) SetUUID(val OptString) {
	s.UUID = val
}

// SetImplementationVersion sets the value of ImplementationVersion.
func (s *PoolsInfo) SetImplementationVersion(val OptString) {
	s.ImplementationVersion = val
}

// SetComponentsVersion sets the value of ComponentsVersion.
func (s *PoolsInfo) SetComponentsVersion(val OptPoolsInfoComponentsVersion) {
	s.ComponentsVersion = val
}

type PoolsInfoComponentsVersion map[string]string

func (s *PoolsInfoComponentsVersion) init() PoolsInfoComponentsVersion {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type PoolsInfoPoolsItem struct {
	Name         OptString `json:"name"`
	URI          OptString `json:"uri"`
	StreamingUri OptString `json:"streamingUri"`
}

// GetName returns the value of Name.
func (s *PoolsInfoPoolsItem) GetName() OptString {
	return s.Name
}

// GetURI returns the value of URI.
func (s *PoolsInfoPoolsItem) GetURI() OptString {
	return s.URI
}

// GetStreamingUri returns the value of StreamingUri.
func (s *PoolsInfoPoolsItem) GetStreamingUri() OptString {
	return s.StreamingUri
}

// SetName sets the value of Name.
func (s *PoolsInfoPoolsItem) SetName(val OptString) {
	s.Name = val
}

// SetURI sets the value of URI.
func (s *PoolsInfoPoolsItem) SetURI(val OptString) {
	s.URI = val
}

// SetStreamingUri sets the value of StreamingUri.
func (s *PoolsInfoPoolsItem) SetStreamingUri(val OptString) {
	s.StreamingUri = val
}

type PoolsInfoSettings struct {
	MaxParallelIndexers OptString `json:"maxParallelIndexers"`
	ViewUpdateDaemon    OptString `json:"viewUpdateDaemon"`
}

// GetMaxParallelIndexers returns the value of MaxParallelIndexers.
func (s *PoolsInfoSettings) GetMaxParallelIndexers() OptString {
	return s.MaxParallelIndexers
}

// GetViewUpdateDaemon returns the value of ViewUpdateDaemon.
func (s *PoolsInfoSettings) GetViewUpdateDaemon() OptString {
	return s.ViewUpdateDaemon
}

// SetMaxParallelIndexers sets the value of MaxParallelIndexers.
func (s *PoolsInfoSettings) SetMaxParallelIndexers(val OptString) {
	s.MaxParallelIndexers = val
}

// SetViewUpdateDaemon sets the value of ViewUpdateDaemon.
func (s *PoolsInfoSettings) SetViewUpdateDaemon(val OptString) {
	s.ViewUpdateDaemon = val
}

// Ref: #/components/schemas/Service
type Service string

const (
	ServiceFts   Service = "fts"
	ServiceIndex Service = "index"
	ServiceKv    Service = "kv"
	ServiceN1ql  Service = "n1ql"
)

// AllValues returns all Service values.
func (Service) AllValues() []Service {
	return []Service{
		ServiceFts,
		ServiceIndex,
		ServiceKv,
		ServiceN1ql,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Service) MarshalText() ([]byte, error) {
	switch s {
	case ServiceFts:
		return []byte(s), nil
	case ServiceIndex:
		return []byte(s), nil
	case ServiceKv:
		return []byte(s), nil
	case ServiceN1ql:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Service) UnmarshalText(data []byte) error {
	switch Service(data) {
	case ServiceFts:
		*s = ServiceFts
		return nil
	case ServiceIndex:
		*s = ServiceIndex
		return nil
	case ServiceKv:
		*s = ServiceKv
		return nil
	case ServiceN1ql:
		*s = ServiceN1ql
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StorageBackend
type StorageBackend string

const (
	StorageBackendCouchstore StorageBackend = "couchstore"
	StorageBackendMagma      StorageBackend = "magma"
)

// AllValues returns all StorageBackend values.
func (StorageBackend) AllValues() []StorageBackend {
	return []StorageBackend{
		StorageBackendCouchstore,
		StorageBackendMagma,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StorageBackend) MarshalText() ([]byte, error) {
	switch s {
	case StorageBackendCouchstore:
		return []byte(s), nil
	case StorageBackendMagma:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StorageBackend) UnmarshalText(data []byte) error {
	switch StorageBackend(data) {
	case StorageBackendCouchstore:
		*s = StorageBackendCouchstore
		return nil
	case StorageBackendMagma:
		*s = StorageBackendMagma
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TerseBucketInfo
type TerseBucketInfo struct {
	Rev                    OptInt                     `json:"rev"`
	RevEpoch               OptInt                     `json:"revEpoch"`
	Name                   OptString                  `json:"name"`
	NodeLocator            OptNodeLocator             `json:"nodeLocator"`
	BucketType             OptBucketType              `json:"bucketType"`
	StorageBackend         OptStorageBackend          `json:"storageBackend"`
	UUID                   OptString                  `json:"uuid"`
	URI                    OptString                  `json:"uri"`
	StreamingUri           OptString                  `json:"streamingUri"`
	BucketCapabilitiesVer  OptString                  `json:"bucketCapabilitiesVer"`
	BucketCapabilities     []BucketCapability         `json:"bucketCapabilities"`
	CollectionManifestUid  OptString                  `json:"collectionManifestUid"`
	Ddocs                  OptTerseBucketInfoDdocs    `json:"ddocs"`
	VBucketServerMap       OptVBucketServerMap        `json:"vBucketServerMap"`
	Nodes                  []TerseNodeInfo            `json:"nodes"`
	NodesExt               []TerseNodeExtInfo         `json:"nodesExt"`
	ClusterCapabilitiesVer ClusterCapabilitiesVersion `json:"clusterCapabilitiesVer"`
	ClusterCapabilities    OptClusterCapabilities     `json:"clusterCapabilities"`
}

// GetRev returns the value of Rev.
func (s *TerseBucketInfo) GetRev() OptInt {
	return s.Rev
}

// GetRevEpoch returns the value of RevEpoch.
func (s *TerseBucketInfo) GetRevEpoch() OptInt {
	return s.RevEpoch
}

// GetName returns the value of Name.
func (s *TerseBucketInfo) GetName() OptString {
	return s.Name
}

// GetNodeLocator returns the value of NodeLocator.
func (s *TerseBucketInfo) GetNodeLocator() OptNodeLocator {
	return s.NodeLocator
}

// GetBucketType returns the value of BucketType.
func (s *TerseBucketInfo) GetBucketType() OptBucketType {
	return s.BucketType
}

// GetStorageBackend returns the value of StorageBackend.
func (s *TerseBucketInfo) GetStorageBackend() OptStorageBackend {
	return s.StorageBackend
}

// GetUUID returns the value of UUID.
func (s *TerseBucketInfo) GetUUID() OptString {
	return s.UUID
}

// GetURI returns the value of URI.
func (s *TerseBucketInfo) GetURI() OptString {
	return s.URI
}

// GetStreamingUri returns the value of StreamingUri.
func (s *TerseBucketInfo) GetStreamingUri() OptString {
	return s.StreamingUri
}

// GetBucketCapabilitiesVer returns the value of BucketCapabilitiesVer.
func (s *TerseBucketInfo) GetBucketCapabilitiesVer() OptString {
	return s.BucketCapabilitiesVer
}

// GetBucketCapabilities returns the value of BucketCapabilities.
func (s *TerseBucketInfo) GetBucketCapabilities() []BucketCapability {
	return s.BucketCapabilities
}

// GetCollectionManifestUid returns the value of CollectionManifestUid.
func (s *TerseBucketInfo) GetCollectionManifestUid() OptString {
	return s.CollectionManifestUid
}

// GetDdocs returns the value of Ddocs.
func (s *TerseBucketInfo) GetDdocs() OptTerseBucketInfoDdocs {
	return s.Ddocs
}

// GetVBucketServerMap returns the value of VBucketServerMap.
func (s *TerseBucketInfo) GetVBucketServerMap() OptVBucketServerMap {
	return s.VBucketServerMap
}

// GetNodes returns the value of Nodes.
func (s *TerseBucketInfo) GetNodes() []TerseNodeInfo {
	return s.Nodes
}

// GetNodesExt returns the value of NodesExt.
func (s *TerseBucketInfo) GetNodesExt() []TerseNodeExtInfo {
	return s.NodesExt
}

// GetClusterCapabilitiesVer returns the value of ClusterCapabilitiesVer.
func (s *TerseBucketInfo) GetClusterCapabilitiesVer() ClusterCapabilitiesVersion {
	return s.ClusterCapabilitiesVer
}

// GetClusterCapabilities returns the value of ClusterCapabilities.
func (s *TerseBucketInfo) GetClusterCapabilities() OptClusterCapabilities {
	return s.ClusterCapabilities
}

// SetRev sets the value of Rev.
func (s *TerseBucketInfo) SetRev(val OptInt) {
	s.Rev = val
}

// SetRevEpoch sets the value of RevEpoch.
func (s *TerseBucketInfo) SetRevEpoch(val OptInt) {
	s.RevEpoch = val
}

// SetName sets the value of Name.
func (s *TerseBucketInfo) SetName(val OptString) {
	s.Name = val
}

// SetNodeLocator sets the value of NodeLocator.
func (s *TerseBucketInfo) SetNodeLocator(val OptNodeLocator) {
	s.NodeLocator = val
}

// SetBucketType sets the value of BucketType.
func (s *TerseBucketInfo) SetBucketType(val OptBucketType) {
	s.BucketType = val
}

// SetStorageBackend sets the value of StorageBackend.
func (s *TerseBucketInfo) SetStorageBackend(val OptStorageBackend) {
	s.StorageBackend = val
}

// SetUUID sets the value of UUID.
func (s *TerseBucketInfo) SetUUID(val OptString) {
	s.UUID = val
}

// SetURI sets the value of URI.
func (s *TerseBucketInfo) SetURI(val OptString) {
	s.URI = val
}

// SetStreamingUri sets the value of StreamingUri.
func (s *TerseBucketInfo) SetStreamingUri(val OptString) {
	s.StreamingUri = val
}

// SetBucketCapabilitiesVer sets the value of BucketCapabilitiesVer.
func (s *TerseBucketInfo) SetBucketCapabilitiesVer(val OptString) {
	s.BucketCapabilitiesVer = val
}

// SetBucketCapabilities sets the value of BucketCapabilities.
func (s *TerseBucketInfo) SetBucketCapabilities(val []BucketCapability) {
	s.BucketCapabilities = val
}

// SetCollectionManifestUid sets the value of CollectionManifestUid.
func (s *TerseBucketInfo) SetCollectionManifestUid(val OptString) {
	s.CollectionManifestUid = val
}

// SetDdocs sets the value of Ddocs.
func (s *TerseBucketInfo) SetDdocs(val OptTerseBucketInfoDdocs) {
	s.Ddocs = val
}

// SetVBucketServerMap sets the value of VBucketServerMap.
func (s *TerseBucketInfo) SetVBucketServerMap(val OptVBucketServerMap) {
	s.VBucketServerMap = val
}

// SetNodes sets the value of Nodes.
func (s *TerseBucketInfo) SetNodes(val []TerseNodeInfo) {
	s.Nodes = val
}

// SetNodesExt sets the value of NodesExt.
func (s *TerseBucketInfo) SetNodesExt(val []TerseNodeExtInfo) {
	s.NodesExt = val
}

// SetClusterCapabilitiesVer sets the value of ClusterCapabilitiesVer.
func (s *TerseBucketInfo) SetClusterCapabilitiesVer(val ClusterCapabilitiesVersion) {
	s.ClusterCapabilitiesVer = val
}

// SetClusterCapabilities sets the value of ClusterCapabilities.
func (s *TerseBucketInfo) SetClusterCapabilities(val OptClusterCapabilities) {
	s.ClusterCapabilities = val
}

type TerseBucketInfoDdocs struct {
	URI string `json:"uri"`
}

// GetURI returns the value of URI.
func (s *TerseBucketInfoDdocs) GetURI() string {
	return s.URI
}

// SetURI sets the value of URI.
func (s *TerseBucketInfoDdocs) SetURI(val string) {
	s.URI = val
}

// Ref: #/components/schemas/TerseNodeExtInfo
type TerseNodeExtInfo struct {
	Services OptTerseNodeExtInfoServices `json:"services"`
	ThisNode OptBool                     `json:"thisNode"`
	Hostname OptString                   `json:"hostname"`
}

// GetServices returns the value of Services.
func (s *TerseNodeExtInfo) GetServices() OptTerseNodeExtInfoServices {
	return s.Services
}

// GetThisNode returns the value of ThisNode.
func (s *TerseNodeExtInfo) GetThisNode() OptBool {
	return s.ThisNode
}

// GetHostname returns the value of Hostname.
func (s *TerseNodeExtInfo) GetHostname() OptString {
	return s.Hostname
}

// SetServices sets the value of Services.
func (s *TerseNodeExtInfo) SetServices(val OptTerseNodeExtInfoServices) {
	s.Services = val
}

// SetThisNode sets the value of ThisNode.
func (s *TerseNodeExtInfo) SetThisNode(val OptBool) {
	s.ThisNode = val
}

// SetHostname sets the value of Hostname.
func (s *TerseNodeExtInfo) SetHostname(val OptString) {
	s.Hostname = val
}

type TerseNodeExtInfoServices struct {
	Capi               OptInt `json:"capi"`
	CapiSSL            OptInt `json:"capiSSL"`
	Fts                OptInt `json:"fts"`
	FtsGRPC            OptInt `json:"ftsGRPC"`
	FtsGRPCSSL         OptInt `json:"ftsGRPCSSL"`
	FtsSSL             OptInt `json:"ftsSSL"`
	IndexAdmin         OptInt `json:"indexAdmin"`
	IndexHttp          OptInt `json:"indexHttp"`
	IndexHttps         OptInt `json:"indexHttps"`
	IndexScan          OptInt `json:"indexScan"`
	IndexStreamCatchup OptInt `json:"indexStreamCatchup"`
	IndexStreamInit    OptInt `json:"indexStreamInit"`
	IndexStreamMaint   OptInt `json:"indexStreamMaint"`
	Kv                 OptInt `json:"kv"`
	KvSSL              OptInt `json:"kvSSL"`
	Mgmt               OptInt `json:"mgmt"`
	MgmtSSL            OptInt `json:"mgmtSSL"`
	N1ql               OptInt `json:"n1ql"`
	N1qlSSL            OptInt `json:"n1qlSSL"`
	Projector          OptInt `json:"projector"`
}

// GetCapi returns the value of Capi.
func (s *TerseNodeExtInfoServices) GetCapi() OptInt {
	return s.Capi
}

// GetCapiSSL returns the value of CapiSSL.
func (s *TerseNodeExtInfoServices) GetCapiSSL() OptInt {
	return s.CapiSSL
}

// GetFts returns the value of Fts.
func (s *TerseNodeExtInfoServices) GetFts() OptInt {
	return s.Fts
}

// GetFtsGRPC returns the value of FtsGRPC.
func (s *TerseNodeExtInfoServices) GetFtsGRPC() OptInt {
	return s.FtsGRPC
}

// GetFtsGRPCSSL returns the value of FtsGRPCSSL.
func (s *TerseNodeExtInfoServices) GetFtsGRPCSSL() OptInt {
	return s.FtsGRPCSSL
}

// GetFtsSSL returns the value of FtsSSL.
func (s *TerseNodeExtInfoServices) GetFtsSSL() OptInt {
	return s.FtsSSL
}

// GetIndexAdmin returns the value of IndexAdmin.
func (s *TerseNodeExtInfoServices) GetIndexAdmin() OptInt {
	return s.IndexAdmin
}

// GetIndexHttp returns the value of IndexHttp.
func (s *TerseNodeExtInfoServices) GetIndexHttp() OptInt {
	return s.IndexHttp
}

// GetIndexHttps returns the value of IndexHttps.
func (s *TerseNodeExtInfoServices) GetIndexHttps() OptInt {
	return s.IndexHttps
}

// GetIndexScan returns the value of IndexScan.
func (s *TerseNodeExtInfoServices) GetIndexScan() OptInt {
	return s.IndexScan
}

// GetIndexStreamCatchup returns the value of IndexStreamCatchup.
func (s *TerseNodeExtInfoServices) GetIndexStreamCatchup() OptInt {
	return s.IndexStreamCatchup
}

// GetIndexStreamInit returns the value of IndexStreamInit.
func (s *TerseNodeExtInfoServices) GetIndexStreamInit() OptInt {
	return s.IndexStreamInit
}

// GetIndexStreamMaint returns the value of IndexStreamMaint.
func (s *TerseNodeExtInfoServices) GetIndexStreamMaint() OptInt {
	return s.IndexStreamMaint
}

// GetKv returns the value of Kv.
func (s *TerseNodeExtInfoServices) GetKv() OptInt {
	return s.Kv
}

// GetKvSSL returns the value of KvSSL.
func (s *TerseNodeExtInfoServices) GetKvSSL() OptInt {
	return s.KvSSL
}

// GetMgmt returns the value of Mgmt.
func (s *TerseNodeExtInfoServices) GetMgmt() OptInt {
	return s.Mgmt
}

// GetMgmtSSL returns the value of MgmtSSL.
func (s *TerseNodeExtInfoServices) GetMgmtSSL() OptInt {
	return s.MgmtSSL
}

// GetN1ql returns the value of N1ql.
func (s *TerseNodeExtInfoServices) GetN1ql() OptInt {
	return s.N1ql
}

// GetN1qlSSL returns the value of N1qlSSL.
func (s *TerseNodeExtInfoServices) GetN1qlSSL() OptInt {
	return s.N1qlSSL
}

// GetProjector returns the value of Projector.
func (s *TerseNodeExtInfoServices) GetProjector() OptInt {
	return s.Projector
}

// SetCapi sets the value of Capi.
func (s *TerseNodeExtInfoServices) SetCapi(val OptInt) {
	s.Capi = val
}

// SetCapiSSL sets the value of CapiSSL.
func (s *TerseNodeExtInfoServices) SetCapiSSL(val OptInt) {
	s.CapiSSL = val
}

// SetFts sets the value of Fts.
func (s *TerseNodeExtInfoServices) SetFts(val OptInt) {
	s.Fts = val
}

// SetFtsGRPC sets the value of FtsGRPC.
func (s *TerseNodeExtInfoServices) SetFtsGRPC(val OptInt) {
	s.FtsGRPC = val
}

// SetFtsGRPCSSL sets the value of FtsGRPCSSL.
func (s *TerseNodeExtInfoServices) SetFtsGRPCSSL(val OptInt) {
	s.FtsGRPCSSL = val
}

// SetFtsSSL sets the value of FtsSSL.
func (s *TerseNodeExtInfoServices) SetFtsSSL(val OptInt) {
	s.FtsSSL = val
}

// SetIndexAdmin sets the value of IndexAdmin.
func (s *TerseNodeExtInfoServices) SetIndexAdmin(val OptInt) {
	s.IndexAdmin = val
}

// SetIndexHttp sets the value of IndexHttp.
func (s *TerseNodeExtInfoServices) SetIndexHttp(val OptInt) {
	s.IndexHttp = val
}

// SetIndexHttps sets the value of IndexHttps.
func (s *TerseNodeExtInfoServices) SetIndexHttps(val OptInt) {
	s.IndexHttps = val
}

// SetIndexScan sets the value of IndexScan.
func (s *TerseNodeExtInfoServices) SetIndexScan(val OptInt) {
	s.IndexScan = val
}

// SetIndexStreamCatchup sets the value of IndexStreamCatchup.
func (s *TerseNodeExtInfoServices) SetIndexStreamCatchup(val OptInt) {
	s.IndexStreamCatchup = val
}

// SetIndexStreamInit sets the value of IndexStreamInit.
func (s *TerseNodeExtInfoServices) SetIndexStreamInit(val OptInt) {
	s.IndexStreamInit = val
}

// SetIndexStreamMaint sets the value of IndexStreamMaint.
func (s *TerseNodeExtInfoServices) SetIndexStreamMaint(val OptInt) {
	s.IndexStreamMaint = val
}

// SetKv sets the value of Kv.
func (s *TerseNodeExtInfoServices) SetKv(val OptInt) {
	s.Kv = val
}

// SetKvSSL sets the value of KvSSL.
func (s *TerseNodeExtInfoServices) SetKvSSL(val OptInt) {
	s.KvSSL = val
}

// SetMgmt sets the value of Mgmt.
func (s *TerseNodeExtInfoServices) SetMgmt(val OptInt) {
	s.Mgmt = val
}

// SetMgmtSSL sets the value of MgmtSSL.
func (s *TerseNodeExtInfoServices) SetMgmtSSL(val OptInt) {
	s.MgmtSSL = val
}

// SetN1ql sets the value of N1ql.
func (s *TerseNodeExtInfoServices) SetN1ql(val OptInt) {
	s.N1ql = val
}

// SetN1qlSSL sets the value of N1qlSSL.
func (s *TerseNodeExtInfoServices) SetN1qlSSL(val OptInt) {
	s.N1qlSSL = val
}

// SetProjector sets the value of Projector.
func (s *TerseNodeExtInfoServices) SetProjector(val OptInt) {
	s.Projector = val
}

// Ref: #/components/schemas/TerseNodeInfo
type TerseNodeInfo struct {
	CouchApiBase OptString             `json:"couchApiBase"`
	Hostanme     OptString             `json:"hostanme"`
	Ports        OptTerseNodeInfoPorts `json:"ports"`
}

// GetCouchApiBase returns the value of CouchApiBase.
func (s *TerseNodeInfo) GetCouchApiBase() OptString {
	return s.CouchApiBase
}

// GetHostanme returns the value of Hostanme.
func (s *TerseNodeInfo) GetHostanme() OptString {
	return s.Hostanme
}

// GetPorts returns the value of Ports.
func (s *TerseNodeInfo) GetPorts() OptTerseNodeInfoPorts {
	return s.Ports
}

// SetCouchApiBase sets the value of CouchApiBase.
func (s *TerseNodeInfo) SetCouchApiBase(val OptString) {
	s.CouchApiBase = val
}

// SetHostanme sets the value of Hostanme.
func (s *TerseNodeInfo) SetHostanme(val OptString) {
	s.Hostanme = val
}

// SetPorts sets the value of Ports.
func (s *TerseNodeInfo) SetPorts(val OptTerseNodeInfoPorts) {
	s.Ports = val
}

type TerseNodeInfoPorts struct {
	Direct OptInt `json:"direct"`
}

// GetDirect returns the value of Direct.
func (s *TerseNodeInfoPorts) GetDirect() OptInt {
	return s.Direct
}

// SetDirect sets the value of Direct.
func (s *TerseNodeInfoPorts) SetDirect(val OptInt) {
	s.Direct = val
}

// Ref: #/components/schemas/VBucketServerMap
type VBucketServerMap struct {
	HashAlgorithm OptString `json:"hashAlgorithm"`
	NumReplicas   OptInt    `json:"numReplicas"`
	ServerList    []string  `json:"serverList"`
	VBucketMap    [][]int   `json:"vBucketMap"`
}

// GetHashAlgorithm returns the value of HashAlgorithm.
func (s *VBucketServerMap) GetHashAlgorithm() OptString {
	return s.HashAlgorithm
}

// GetNumReplicas returns the value of NumReplicas.
func (s *VBucketServerMap) GetNumReplicas() OptInt {
	return s.NumReplicas
}

// GetServerList returns the value of ServerList.
func (s *VBucketServerMap) GetServerList() []string {
	return s.ServerList
}

// GetVBucketMap returns the value of VBucketMap.
func (s *VBucketServerMap) GetVBucketMap() [][]int {
	return s.VBucketMap
}

// SetHashAlgorithm sets the value of HashAlgorithm.
func (s *VBucketServerMap) SetHashAlgorithm(val OptString) {
	s.HashAlgorithm = val
}

// SetNumReplicas sets the value of NumReplicas.
func (s *VBucketServerMap) SetNumReplicas(val OptInt) {
	s.NumReplicas = val
}

// SetServerList sets the value of ServerList.
func (s *VBucketServerMap) SetServerList(val []string) {
	s.ServerList = val
}

// SetVBucketMap sets the value of VBucketMap.
func (s *VBucketServerMap) SetVBucketMap(val [][]int) {
	s.VBucketMap = val
}
