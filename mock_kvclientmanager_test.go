// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gocbcorex

import (
	"context"
	"sync"
)

// Ensure, that KvClientManagerMock does implement KvClientManager.
// If this is not the case, regenerate this file with moq.
var _ KvClientManager = &KvClientManagerMock{}

// KvClientManagerMock is a mock implementation of KvClientManager.
//
//	func TestSomethingThatUsesKvClientManager(t *testing.T) {
//
//		// make and configure a mocked KvClientManager
//		mockedKvClientManager := &KvClientManagerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetClientFunc: func(ctx context.Context) (KvClient, error) {
//				panic("mock out the GetClient method")
//			},
//			ReconfigureFunc: func(opts KvClientManagerConfig)  {
//				panic("mock out the Reconfigure method")
//			},
//		}
//
//		// use mockedKvClientManager in code that requires KvClientManager
//		// and then make assertions.
//
//	}
type KvClientManagerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(ctx context.Context) (KvClient, error)

	// ReconfigureFunc mocks the Reconfigure method.
	ReconfigureFunc func(opts KvClientManagerConfig)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Reconfigure holds details about calls to the Reconfigure method.
		Reconfigure []struct {
			// Opts is the opts argument value.
			Opts KvClientManagerConfig
		}
	}
	lockClose       sync.RWMutex
	lockGetClient   sync.RWMutex
	lockReconfigure sync.RWMutex
}

// Close calls CloseFunc.
func (mock *KvClientManagerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("KvClientManagerMock.CloseFunc: method is nil but KvClientManager.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKvClientManager.CloseCalls())
func (mock *KvClientManagerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KvClientManagerMock) GetClient(ctx context.Context) (KvClient, error) {
	if mock.GetClientFunc == nil {
		panic("KvClientManagerMock.GetClientFunc: method is nil but KvClientManager.GetClient was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc(ctx)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//
//	len(mockedKvClientManager.GetClientCalls())
func (mock *KvClientManagerMock) GetClientCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// Reconfigure calls ReconfigureFunc.
func (mock *KvClientManagerMock) Reconfigure(opts KvClientManagerConfig) {
	if mock.ReconfigureFunc == nil {
		panic("KvClientManagerMock.ReconfigureFunc: method is nil but KvClientManager.Reconfigure was just called")
	}
	callInfo := struct {
		Opts KvClientManagerConfig
	}{
		Opts: opts,
	}
	mock.lockReconfigure.Lock()
	mock.calls.Reconfigure = append(mock.calls.Reconfigure, callInfo)
	mock.lockReconfigure.Unlock()
	mock.ReconfigureFunc(opts)
}

// ReconfigureCalls gets all the calls that were made to Reconfigure.
// Check the length with:
//
//	len(mockedKvClientManager.ReconfigureCalls())
func (mock *KvClientManagerMock) ReconfigureCalls() []struct {
	Opts KvClientManagerConfig
} {
	var calls []struct {
		Opts KvClientManagerConfig
	}
	mock.lockReconfigure.RLock()
	calls = mock.calls.Reconfigure
	mock.lockReconfigure.RUnlock()
	return calls
}
