// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gocbcorex

import (
	"context"
	"sync"
)

// Ensure, that KvClientManagerMock does implement KvClientManager.
// If this is not the case, regenerate this file with moq.
var _ KvClientManager = &KvClientManagerMock{}

// KvClientManagerMock is a mock implementation of KvClientManager.
//
//	func TestSomethingThatUsesKvClientManager(t *testing.T) {
//
//		// make and configure a mocked KvClientManager
//		mockedKvClientManager := &KvClientManagerMock{
//			GetClientFunc: func(ctx context.Context, endpoint string) (KvClient, error) {
//				panic("mock out the GetClient method")
//			},
//			GetRandomClientFunc: func(ctx context.Context) (KvClient, error) {
//				panic("mock out the GetRandomClient method")
//			},
//			ReconfigureFunc: func(opts *KvClientManagerConfig) error {
//				panic("mock out the Reconfigure method")
//			},
//			ShutdownClientFunc: func(endpoint string, client KvClient)  {
//				panic("mock out the ShutdownClient method")
//			},
//		}
//
//		// use mockedKvClientManager in code that requires KvClientManager
//		// and then make assertions.
//
//	}
type KvClientManagerMock struct {
	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(ctx context.Context, endpoint string) (KvClient, error)

	// GetRandomClientFunc mocks the GetRandomClient method.
	GetRandomClientFunc func(ctx context.Context) (KvClient, error)

	// ReconfigureFunc mocks the Reconfigure method.
	ReconfigureFunc func(opts *KvClientManagerConfig) error

	// ShutdownClientFunc mocks the ShutdownClient method.
	ShutdownClientFunc func(endpoint string, client KvClient)

	// calls tracks calls to the methods.
	calls struct {
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint string
		}
		// GetRandomClient holds details about calls to the GetRandomClient method.
		GetRandomClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Reconfigure holds details about calls to the Reconfigure method.
		Reconfigure []struct {
			// Opts is the opts argument value.
			Opts *KvClientManagerConfig
		}
		// ShutdownClient holds details about calls to the ShutdownClient method.
		ShutdownClient []struct {
			// Endpoint is the endpoint argument value.
			Endpoint string
			// Client is the client argument value.
			Client KvClient
		}
	}
	lockGetClient       sync.RWMutex
	lockGetRandomClient sync.RWMutex
	lockReconfigure     sync.RWMutex
	lockShutdownClient  sync.RWMutex
}

// GetClient calls GetClientFunc.
func (mock *KvClientManagerMock) GetClient(ctx context.Context, endpoint string) (KvClient, error) {
	if mock.GetClientFunc == nil {
		panic("KvClientManagerMock.GetClientFunc: method is nil but KvClientManager.GetClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint string
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc(ctx, endpoint)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//
//	len(mockedKvClientManager.GetClientCalls())
func (mock *KvClientManagerMock) GetClientCalls() []struct {
	Ctx      context.Context
	Endpoint string
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint string
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// GetRandomClient calls GetRandomClientFunc.
func (mock *KvClientManagerMock) GetRandomClient(ctx context.Context) (KvClient, error) {
	if mock.GetRandomClientFunc == nil {
		panic("KvClientManagerMock.GetRandomClientFunc: method is nil but KvClientManager.GetRandomClient was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetRandomClient.Lock()
	mock.calls.GetRandomClient = append(mock.calls.GetRandomClient, callInfo)
	mock.lockGetRandomClient.Unlock()
	return mock.GetRandomClientFunc(ctx)
}

// GetRandomClientCalls gets all the calls that were made to GetRandomClient.
// Check the length with:
//
//	len(mockedKvClientManager.GetRandomClientCalls())
func (mock *KvClientManagerMock) GetRandomClientCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetRandomClient.RLock()
	calls = mock.calls.GetRandomClient
	mock.lockGetRandomClient.RUnlock()
	return calls
}

// Reconfigure calls ReconfigureFunc.
func (mock *KvClientManagerMock) Reconfigure(opts *KvClientManagerConfig) error {
	if mock.ReconfigureFunc == nil {
		panic("KvClientManagerMock.ReconfigureFunc: method is nil but KvClientManager.Reconfigure was just called")
	}
	callInfo := struct {
		Opts *KvClientManagerConfig
	}{
		Opts: opts,
	}
	mock.lockReconfigure.Lock()
	mock.calls.Reconfigure = append(mock.calls.Reconfigure, callInfo)
	mock.lockReconfigure.Unlock()
	return mock.ReconfigureFunc(opts)
}

// ReconfigureCalls gets all the calls that were made to Reconfigure.
// Check the length with:
//
//	len(mockedKvClientManager.ReconfigureCalls())
func (mock *KvClientManagerMock) ReconfigureCalls() []struct {
	Opts *KvClientManagerConfig
} {
	var calls []struct {
		Opts *KvClientManagerConfig
	}
	mock.lockReconfigure.RLock()
	calls = mock.calls.Reconfigure
	mock.lockReconfigure.RUnlock()
	return calls
}

// ShutdownClient calls ShutdownClientFunc.
func (mock *KvClientManagerMock) ShutdownClient(endpoint string, client KvClient) {
	if mock.ShutdownClientFunc == nil {
		panic("KvClientManagerMock.ShutdownClientFunc: method is nil but KvClientManager.ShutdownClient was just called")
	}
	callInfo := struct {
		Endpoint string
		Client   KvClient
	}{
		Endpoint: endpoint,
		Client:   client,
	}
	mock.lockShutdownClient.Lock()
	mock.calls.ShutdownClient = append(mock.calls.ShutdownClient, callInfo)
	mock.lockShutdownClient.Unlock()
	mock.ShutdownClientFunc(endpoint, client)
}

// ShutdownClientCalls gets all the calls that were made to ShutdownClient.
// Check the length with:
//
//	len(mockedKvClientManager.ShutdownClientCalls())
func (mock *KvClientManagerMock) ShutdownClientCalls() []struct {
	Endpoint string
	Client   KvClient
} {
	var calls []struct {
		Endpoint string
		Client   KvClient
	}
	mock.lockShutdownClient.RLock()
	calls = mock.calls.ShutdownClient
	mock.lockShutdownClient.RUnlock()
	return calls
}
