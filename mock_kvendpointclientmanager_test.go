// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gocbcorex

import (
	"context"
	"sync"
)

// Ensure, that KvEndpointClientManagerMock does implement KvEndpointClientManager.
// If this is not the case, regenerate this file with moq.
var _ KvEndpointClientManager = &KvEndpointClientManagerMock{}

// KvEndpointClientManagerMock is a mock implementation of KvEndpointClientManager.
//
//	func TestSomethingThatUsesKvEndpointClientManager(t *testing.T) {
//
//		// make and configure a mocked KvEndpointClientManager
//		mockedKvEndpointClientManager := &KvEndpointClientManagerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetClientFunc: func(ctx context.Context) (KvClient, error) {
//				panic("mock out the GetClient method")
//			},
//			GetEndpointClientFunc: func(ctx context.Context, endpoint string) (KvClient, error) {
//				panic("mock out the GetEndpointClient method")
//			},
//			ReconfigureFunc: func(config KvEndpointClientManagerConfig)  {
//				panic("mock out the Reconfigure method")
//			},
//		}
//
//		// use mockedKvEndpointClientManager in code that requires KvEndpointClientManager
//		// and then make assertions.
//
//	}
type KvEndpointClientManagerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(ctx context.Context) (KvClient, error)

	// GetEndpointClientFunc mocks the GetEndpointClient method.
	GetEndpointClientFunc func(ctx context.Context, endpoint string) (KvClient, error)

	// ReconfigureFunc mocks the Reconfigure method.
	ReconfigureFunc func(config KvEndpointClientManagerConfig)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetEndpointClient holds details about calls to the GetEndpointClient method.
		GetEndpointClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint string
		}
		// Reconfigure holds details about calls to the Reconfigure method.
		Reconfigure []struct {
			// Config is the config argument value.
			Config KvEndpointClientManagerConfig
		}
	}
	lockClose             sync.RWMutex
	lockGetClient         sync.RWMutex
	lockGetEndpointClient sync.RWMutex
	lockReconfigure       sync.RWMutex
}

// Close calls CloseFunc.
func (mock *KvEndpointClientManagerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("KvEndpointClientManagerMock.CloseFunc: method is nil but KvEndpointClientManager.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.CloseCalls())
func (mock *KvEndpointClientManagerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KvEndpointClientManagerMock) GetClient(ctx context.Context) (KvClient, error) {
	if mock.GetClientFunc == nil {
		panic("KvEndpointClientManagerMock.GetClientFunc: method is nil but KvEndpointClientManager.GetClient was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc(ctx)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.GetClientCalls())
func (mock *KvEndpointClientManagerMock) GetClientCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// GetEndpointClient calls GetEndpointClientFunc.
func (mock *KvEndpointClientManagerMock) GetEndpointClient(ctx context.Context, endpoint string) (KvClient, error) {
	if mock.GetEndpointClientFunc == nil {
		panic("KvEndpointClientManagerMock.GetEndpointClientFunc: method is nil but KvEndpointClientManager.GetEndpointClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint string
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetEndpointClient.Lock()
	mock.calls.GetEndpointClient = append(mock.calls.GetEndpointClient, callInfo)
	mock.lockGetEndpointClient.Unlock()
	return mock.GetEndpointClientFunc(ctx, endpoint)
}

// GetEndpointClientCalls gets all the calls that were made to GetEndpointClient.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.GetEndpointClientCalls())
func (mock *KvEndpointClientManagerMock) GetEndpointClientCalls() []struct {
	Ctx      context.Context
	Endpoint string
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint string
	}
	mock.lockGetEndpointClient.RLock()
	calls = mock.calls.GetEndpointClient
	mock.lockGetEndpointClient.RUnlock()
	return calls
}

// Reconfigure calls ReconfigureFunc.
func (mock *KvEndpointClientManagerMock) Reconfigure(config KvEndpointClientManagerConfig) {
	if mock.ReconfigureFunc == nil {
		panic("KvEndpointClientManagerMock.ReconfigureFunc: method is nil but KvEndpointClientManager.Reconfigure was just called")
	}
	callInfo := struct {
		Config KvEndpointClientManagerConfig
	}{
		Config: config,
	}
	mock.lockReconfigure.Lock()
	mock.calls.Reconfigure = append(mock.calls.Reconfigure, callInfo)
	mock.lockReconfigure.Unlock()
	mock.ReconfigureFunc(config)
}

// ReconfigureCalls gets all the calls that were made to Reconfigure.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.ReconfigureCalls())
func (mock *KvEndpointClientManagerMock) ReconfigureCalls() []struct {
	Config KvEndpointClientManagerConfig
} {
	var calls []struct {
		Config KvEndpointClientManagerConfig
	}
	mock.lockReconfigure.RLock()
	calls = mock.calls.Reconfigure
	mock.lockReconfigure.RUnlock()
	return calls
}
