// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gocbcorex

import (
	"context"
	"sync"
)

// Ensure, that KvEndpointClientManagerMock does implement KvEndpointClientManager.
// If this is not the case, regenerate this file with moq.
var _ KvEndpointClientManager = &KvEndpointClientManagerMock{}

// KvEndpointClientManagerMock is a mock implementation of KvEndpointClientManager.
//
//	func TestSomethingThatUsesKvEndpointClientManager(t *testing.T) {
//
//		// make and configure a mocked KvEndpointClientManager
//		mockedKvEndpointClientManager := &KvEndpointClientManagerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetClientFunc: func(ctx context.Context) (KvClient, error) {
//				panic("mock out the GetClient method")
//			},
//			GetEndpointClientFunc: func(ctx context.Context, endpoint string) (KvClient, error) {
//				panic("mock out the GetEndpointClient method")
//			},
//			UpdateAuthFunc: func(newAuth KvClientAuth)  {
//				panic("mock out the UpdateAuth method")
//			},
//			UpdateEndpointsFunc: func(endpoints map[string]KvTarget, addOnly bool)  {
//				panic("mock out the UpdateEndpoints method")
//			},
//			UpdateSelectedBucketFunc: func(newBucket string)  {
//				panic("mock out the UpdateSelectedBucket method")
//			},
//		}
//
//		// use mockedKvEndpointClientManager in code that requires KvEndpointClientManager
//		// and then make assertions.
//
//	}
type KvEndpointClientManagerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(ctx context.Context) (KvClient, error)

	// GetEndpointClientFunc mocks the GetEndpointClient method.
	GetEndpointClientFunc func(ctx context.Context, endpoint string) (KvClient, error)

	// UpdateAuthFunc mocks the UpdateAuth method.
	UpdateAuthFunc func(newAuth KvClientAuth)

	// UpdateEndpointsFunc mocks the UpdateEndpoints method.
	UpdateEndpointsFunc func(endpoints map[string]KvTarget, addOnly bool)

	// UpdateSelectedBucketFunc mocks the UpdateSelectedBucket method.
	UpdateSelectedBucketFunc func(newBucket string)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetEndpointClient holds details about calls to the GetEndpointClient method.
		GetEndpointClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Endpoint is the endpoint argument value.
			Endpoint string
		}
		// UpdateAuth holds details about calls to the UpdateAuth method.
		UpdateAuth []struct {
			// NewAuth is the newAuth argument value.
			NewAuth KvClientAuth
		}
		// UpdateEndpoints holds details about calls to the UpdateEndpoints method.
		UpdateEndpoints []struct {
			// Endpoints is the endpoints argument value.
			Endpoints map[string]KvTarget
			// AddOnly is the addOnly argument value.
			AddOnly bool
		}
		// UpdateSelectedBucket holds details about calls to the UpdateSelectedBucket method.
		UpdateSelectedBucket []struct {
			// NewBucket is the newBucket argument value.
			NewBucket string
		}
	}
	lockClose                sync.RWMutex
	lockGetClient            sync.RWMutex
	lockGetEndpointClient    sync.RWMutex
	lockUpdateAuth           sync.RWMutex
	lockUpdateEndpoints      sync.RWMutex
	lockUpdateSelectedBucket sync.RWMutex
}

// Close calls CloseFunc.
func (mock *KvEndpointClientManagerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("KvEndpointClientManagerMock.CloseFunc: method is nil but KvEndpointClientManager.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.CloseCalls())
func (mock *KvEndpointClientManagerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KvEndpointClientManagerMock) GetClient(ctx context.Context) (KvClient, error) {
	if mock.GetClientFunc == nil {
		panic("KvEndpointClientManagerMock.GetClientFunc: method is nil but KvEndpointClientManager.GetClient was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc(ctx)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.GetClientCalls())
func (mock *KvEndpointClientManagerMock) GetClientCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// GetEndpointClient calls GetEndpointClientFunc.
func (mock *KvEndpointClientManagerMock) GetEndpointClient(ctx context.Context, endpoint string) (KvClient, error) {
	if mock.GetEndpointClientFunc == nil {
		panic("KvEndpointClientManagerMock.GetEndpointClientFunc: method is nil but KvEndpointClientManager.GetEndpointClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Endpoint string
	}{
		Ctx:      ctx,
		Endpoint: endpoint,
	}
	mock.lockGetEndpointClient.Lock()
	mock.calls.GetEndpointClient = append(mock.calls.GetEndpointClient, callInfo)
	mock.lockGetEndpointClient.Unlock()
	return mock.GetEndpointClientFunc(ctx, endpoint)
}

// GetEndpointClientCalls gets all the calls that were made to GetEndpointClient.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.GetEndpointClientCalls())
func (mock *KvEndpointClientManagerMock) GetEndpointClientCalls() []struct {
	Ctx      context.Context
	Endpoint string
} {
	var calls []struct {
		Ctx      context.Context
		Endpoint string
	}
	mock.lockGetEndpointClient.RLock()
	calls = mock.calls.GetEndpointClient
	mock.lockGetEndpointClient.RUnlock()
	return calls
}

// UpdateAuth calls UpdateAuthFunc.
func (mock *KvEndpointClientManagerMock) UpdateAuth(newAuth KvClientAuth) {
	if mock.UpdateAuthFunc == nil {
		panic("KvEndpointClientManagerMock.UpdateAuthFunc: method is nil but KvEndpointClientManager.UpdateAuth was just called")
	}
	callInfo := struct {
		NewAuth KvClientAuth
	}{
		NewAuth: newAuth,
	}
	mock.lockUpdateAuth.Lock()
	mock.calls.UpdateAuth = append(mock.calls.UpdateAuth, callInfo)
	mock.lockUpdateAuth.Unlock()
	mock.UpdateAuthFunc(newAuth)
}

// UpdateAuthCalls gets all the calls that were made to UpdateAuth.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.UpdateAuthCalls())
func (mock *KvEndpointClientManagerMock) UpdateAuthCalls() []struct {
	NewAuth KvClientAuth
} {
	var calls []struct {
		NewAuth KvClientAuth
	}
	mock.lockUpdateAuth.RLock()
	calls = mock.calls.UpdateAuth
	mock.lockUpdateAuth.RUnlock()
	return calls
}

// UpdateEndpoints calls UpdateEndpointsFunc.
func (mock *KvEndpointClientManagerMock) UpdateEndpoints(endpoints map[string]KvTarget, addOnly bool) {
	if mock.UpdateEndpointsFunc == nil {
		panic("KvEndpointClientManagerMock.UpdateEndpointsFunc: method is nil but KvEndpointClientManager.UpdateEndpoints was just called")
	}
	callInfo := struct {
		Endpoints map[string]KvTarget
		AddOnly   bool
	}{
		Endpoints: endpoints,
		AddOnly:   addOnly,
	}
	mock.lockUpdateEndpoints.Lock()
	mock.calls.UpdateEndpoints = append(mock.calls.UpdateEndpoints, callInfo)
	mock.lockUpdateEndpoints.Unlock()
	mock.UpdateEndpointsFunc(endpoints, addOnly)
}

// UpdateEndpointsCalls gets all the calls that were made to UpdateEndpoints.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.UpdateEndpointsCalls())
func (mock *KvEndpointClientManagerMock) UpdateEndpointsCalls() []struct {
	Endpoints map[string]KvTarget
	AddOnly   bool
} {
	var calls []struct {
		Endpoints map[string]KvTarget
		AddOnly   bool
	}
	mock.lockUpdateEndpoints.RLock()
	calls = mock.calls.UpdateEndpoints
	mock.lockUpdateEndpoints.RUnlock()
	return calls
}

// UpdateSelectedBucket calls UpdateSelectedBucketFunc.
func (mock *KvEndpointClientManagerMock) UpdateSelectedBucket(newBucket string) {
	if mock.UpdateSelectedBucketFunc == nil {
		panic("KvEndpointClientManagerMock.UpdateSelectedBucketFunc: method is nil but KvEndpointClientManager.UpdateSelectedBucket was just called")
	}
	callInfo := struct {
		NewBucket string
	}{
		NewBucket: newBucket,
	}
	mock.lockUpdateSelectedBucket.Lock()
	mock.calls.UpdateSelectedBucket = append(mock.calls.UpdateSelectedBucket, callInfo)
	mock.lockUpdateSelectedBucket.Unlock()
	mock.UpdateSelectedBucketFunc(newBucket)
}

// UpdateSelectedBucketCalls gets all the calls that were made to UpdateSelectedBucket.
// Check the length with:
//
//	len(mockedKvEndpointClientManager.UpdateSelectedBucketCalls())
func (mock *KvEndpointClientManagerMock) UpdateSelectedBucketCalls() []struct {
	NewBucket string
} {
	var calls []struct {
		NewBucket string
	}
	mock.lockUpdateSelectedBucket.RLock()
	calls = mock.calls.UpdateSelectedBucket
	mock.lockUpdateSelectedBucket.RUnlock()
	return calls
}
